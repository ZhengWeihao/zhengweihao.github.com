<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>place_your_blog_title_here</title>
    <link>place_your_blog_url_here</link>
    <atom:link href="place_your_blog_url_here/rss.xml" rel="self" type="application/rss+xml" />
    <description>place_your_blog_description_here</description>
    <language>place_your_blog_language_here</language>
    <pubDate>Sun, 26 Jun 2016 17:21:22 +0800</pubDate>
    <lastBuildDate>Sun, 26 Jun 2016 17:21:22 +0800</lastBuildDate>

    
    <item>
      <title>JQuery+CSS3实现雪花飘落效果</title>
      <link>place_your_blog_url_here/frontend/cordova/2015/03/20/css3-snowflake.html</link>
      <pubDate>20 Mar 2015</pubDate>
      <author>place_your_name_here</author>
      <guid>place_your_blog_url_here/frontend/cordova/2015/03/20/css3-snowflake</guid>
      <description>&lt;h2 id=&quot;jquerycss3&quot;&gt;JQuery+CSS3实现雪花飘落效果&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;想到做这个效果的想法来自于去年年底，淘宝APP上出现了雪花飘落的效果，脑袋一动觉得CSS3似乎也很好实现，就动手做了这么个demo，但因为比较懒，直到现在才想到推到blog上。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;预期效果：
  产生漫天雪花，从天空飘落到地面，停留稍瞬后消融。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;实现思路：
  第一步是产生雪花，即产生div，并利用随机数，随机一定区间的数字作为div的宽高、透明度，并设置border-radius属性为宽高值，即可得到一片大小、透明度随机的雪花。之后将雪花位置设置在屏幕顶端，横向位置随机，即完成雪花的初始化。示例代码如下：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  // 产生雪花dom
  function snowflake(size, alpha, top, left) {
      var s = document.createElement(&#39;div&#39;);
      $(s).css({
          &#39;width&#39;: size,
          &#39;height&#39;: size,
          &#39;border-radius&#39;: size,
          &#39;background-color&#39;: &#39;rgba(255,255,255,&#39; + alpha + &#39;)&#39;,
          &#39;top&#39;: -50,
          &#39;left&#39;: left,
      }).addClass(&#39;snowflake&#39;);
      return s;
  }

  // 获取一片随机大小、透明度的雪花示例
  var size = Math.random() * flakeSize + 2;
  var alpha = Math.random() * 0.7 + 0.1;
  var left = Math.random() * $(window).width();
  var s = snowflake(size, alpha, 0, left);
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;产生雪花后，设置css3的transition属性，并将div移动到屏幕底部，即可开启动画效果。同时，雪花飘落后，停顿若干时长再将dom删除，即可达到雪花消融效果。示例代码如下：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  .snowflake {
      background-color: rgba(255, 255, 255, 0.5);
      display: inline-block;
      transition: top 2s;// 此处认为动画时间为2秒较为合适,实际情况中可自行调整
      transition-timing-function: cubic-bezier(0.25,0.1,0.25,1);// 设置动画的贝塞尔值,使得动画不显得生硬,具体值同样也可按个人喜好调整
  }

  // 利用setTimeout方法,延时消除雪花,melt的值即为雪花飘落后留存的时长
  setTimeout(function() {
      $s.remove();
  }, 2000 + melt);

  完成一片雪花的动画效果后，只要快速不停地循环这个，即能产生雪花不停飘落的效果了。示例代码如下：

  var it = setInterval(function() {
      // 初始化雪花
      var id = &#39;s_&#39; + (++animateId);
      var size = Math.random() * flakeSize + 2;
      var alpha = Math.random() * 0.7 + 0.1;
      var left = Math.random() * $(window).width();
      var s = snowflake(size, alpha, 0, left);
      var $s = $(s).attr(&#39;id&#39;, id);
      $sky.get(0).appendChild(s);

      // 雪花飘落并消融,延迟执行以确保dom已经生成好
      setTimeout(function() {
          $s.css(&#39;top&#39;, maxTop + (flakeSize - $s.width()) / 2);

          setTimeout(function() {
              $s.remove();
          }, 2000 + melt);
      }, 100);
  }, rate);
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;结果展示：
  进入页面随机开始频率为60ms，融化时长2s的动画，页面向下拖动可设置参数，&lt;a href=&quot;/example/snowflake/index.html&quot;&gt;点我查看页面&lt;/a&gt;。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Cordova开发笔记</title>
      <link>place_your_blog_url_here/frontend/cordova/2015/03/20/cordova-first.html</link>
      <pubDate>20 Mar 2015</pubDate>
      <author>place_your_name_here</author>
      <guid>place_your_blog_url_here/frontend/cordova/2015/03/20/cordova-first</guid>
      <description>&lt;h2 id=&quot;cordova&quot;&gt;Cordova开发笔记&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;　　最近接触了一个需要将网页打包成为手机App，以达到快速成型目的的项目，故而需要使用Cordova来进行开发，也因此进行了一些对于使用Cordova开发手机App的实践，在这里记录Cordova的使用，以及这段时间以来的心得体会。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;cordova-1&quot;&gt;Cordova基本开发环境&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;安装&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;　　Cordova的安装可以选择&lt;code&gt;下载安装&lt;/code&gt;及&lt;code&gt;使用node安装工具&lt;/code&gt;两种方式，而我采用了node安装的方式，所以需要先安装&lt;a href=&quot;https://nodejs.org&quot; title=&quot;nodejs&quot;&gt;nodejs&lt;/a&gt;，之后使用npm命令安装：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	// MACOS
	$ sudo npm install -g cordova
	// windows
	C:\&amp;gt;npm install -g cordova
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　　命令安装完之后，在node目录下就会产生cordova的文件夹了，再将它配置到环境变量中之后就支持cordova命令了。&lt;/p&gt;

&lt;p&gt;　　但是还没结束，因为Cordova编译是通过ant来进行的，所以还需要安装ant，下载&lt;a href=&quot;http://ant.apache.org&quot; title=&quot;ant&quot;&gt;ant&lt;/a&gt;并配置环境变量即可。&lt;/p&gt;

&lt;p&gt;　　而如果还需要开发Android应用，则还需要下载安装&lt;a href=&quot;http://developer.android.com/tools/help/adt.html&quot; title=&quot;Android Development Tools&quot;&gt;安卓开发工具&lt;/a&gt;，打开SDK Manager下载Cordova需要的SDK版本（当前使用21版本），并配置ANDROID_HOME环境变量即可。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;hello world&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;　　基本操作命令比较简单就直接记录命令了：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	// 创建项目
	cordova create {project name} [{project package} {app name}]
	// 添加环境
	cordova platform add [android|ios|...]
	// 添加插件
	cordova plugin add {plugin package}
	// 运行环境
	cordova run [android|ios|...]
	// 打包项目（需要先将证书文件拷到ant-build目录）
	cordova build -release
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>SpringMVC集成Freemark及JSON格式输出</title>
      <link>place_your_blog_url_here/backend/java/spring/springmvc/2015/02/16/spring-mvc-freemark.html</link>
      <pubDate>16 Feb 2015</pubDate>
      <author>place_your_name_here</author>
      <guid>place_your_blog_url_here/backend/java/spring/springmvc/2015/02/16/spring-mvc-freemark</guid>
      <description>&lt;h2 id=&quot;springmvcfreemarkjson&quot;&gt;SpringMVC集成Freemark及JSON格式输出&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;最近做项目需要使用SpringMVC代替Struts2，因此进行了对SpringMVC的一些初步学习，而在以前的项目中，也是对Freemark比较熟悉，所以也做了整合Freemark的一些工作，在这里做个记录。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;springmvc&quot;&gt;第一部分：SpringMVC基本配置&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Jar包：&lt;/p&gt;

    &lt;p&gt;　　项目为Maven工程，所以使用pom文件管理jar包，具体依赖如下：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;    &amp;lt;!--spring 依赖 --&amp;gt;
    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;spring-beans&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;3.1.0.RELEASE&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;spring-context&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;3.1.0.RELEASE&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;spring-context-support&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;3.1.0.RELEASE&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;spring-core&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;3.1.0.RELEASE&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;spring-aop&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;spring-web&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;3.1.0.RELEASE&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;spring-webmvc&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;spring-tx&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;spring-orm&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;spring-jdbc&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
	  
    &amp;lt;!-- Freemarker --&amp;gt;
    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;org.freemarker&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;freemarker&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;2.3.20&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Spring支持与SpringMVC基本配置：&lt;/p&gt;

    &lt;p&gt;　　１、Spring基本配置，在Web.xml中添加相应地监听器，并指定配置文件（记得建立配置文件，否则会报FileNotFound异常），如下：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  &amp;lt;!-- Spring 上下文配置文件 --&amp;gt;
  &amp;lt;context-param&amp;gt;
      &amp;lt;param-name&amp;gt;contextConfigLocation&amp;lt;/param-name&amp;gt;
      &amp;lt;param-value&amp;gt;classpath:applicationContext.xml&amp;lt;/param-value&amp;gt;
  &amp;lt;/context-param&amp;gt;

  &amp;lt;!-- Spring 刷新Introspector防止内存泄露 --&amp;gt;
  &amp;lt;listener&amp;gt;
      &amp;lt;listener-class&amp;gt;
          org.springframework.web.util.IntrospectorCleanupListener
      &amp;lt;/listener-class&amp;gt;
  &amp;lt;/listener&amp;gt;

  &amp;lt;!-- Spring 使用ContextLoaderListener加载ApplicationContext配置信息 --&amp;gt;
  &amp;lt;listener&amp;gt;
      &amp;lt;listener-class&amp;gt;org.springframework.web.context.ContextLoaderListener&amp;lt;/listener-class&amp;gt;
  &amp;lt;/listener&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;　　２、SpringMVC配置(Web.xml中配置，并建立spring-mvc.xml配置文件）。&lt;/p&gt;

    &lt;p&gt;　　在web.xml中添加DispatcherServlet的设定，并设置url-pattern为要捕获的路径规则（也可设置成类似*.action的格式），如下：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  &amp;lt;!-- Spring MVC --&amp;gt;
  &amp;lt;servlet&amp;gt;
      &amp;lt;servlet-name&amp;gt;springDispatcherServlet&amp;lt;/servlet-name&amp;gt;
      &amp;lt;servlet-class&amp;gt;org.springframework.web.servlet.DispatcherServlet&amp;lt;/servlet-class&amp;gt;
      &amp;lt;init-param&amp;gt;
          &amp;lt;param-name&amp;gt;contextConfigLocation&amp;lt;/param-name&amp;gt;
          &amp;lt;param-value&amp;gt;classpath:spring-mvc.xml&amp;lt;/param-value&amp;gt;
      &amp;lt;/init-param&amp;gt;
      &amp;lt;load-on-startup&amp;gt;1&amp;lt;/load-on-startup&amp;gt;
  &amp;lt;/servlet&amp;gt;
  &amp;lt;servlet-mapping&amp;gt;
      &amp;lt;servlet-name&amp;gt;springDispatcherServlet&amp;lt;/servlet-name&amp;gt;
      &amp;lt;url-pattern&amp;gt;/&amp;lt;/url-pattern&amp;gt;
  &amp;lt;/servlet-mapping&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;　　在spring-mvc.xml中配置页面返回规则，并指定Spring自动扫描的路径，如下：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  &amp;lt;!-- Spring MVC UrlMapping --&amp;gt;
          &amp;lt;!-- Spring MVC UrlMapping --&amp;gt;
  &amp;lt;bean id=&quot;urlMapping&quot;
      class=&quot;org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping&quot; /&amp;gt;
  &amp;lt;bean
      class=&quot;org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter&quot;&amp;gt;
      &amp;lt;property name=&quot;messageConverters&quot;&amp;gt;
          &amp;lt;list&amp;gt;
              &amp;lt;bean id=&quot;mappingStringHttpMessageConverter&quot; class=&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;&amp;gt;
                  &amp;lt;property name=&quot;supportedMediaTypes&quot;&amp;gt;
                      &amp;lt;list&amp;gt;
                          &amp;lt;bean class=&quot;org.springframework.http.MediaType&quot;&amp;gt;
                              &amp;lt;constructor-arg index=&quot;0&quot; value=&quot;text&quot; /&amp;gt;
                              &amp;lt;constructor-arg index=&quot;1&quot; value=&quot;plain&quot; /&amp;gt;
                              &amp;lt;constructor-arg index=&quot;2&quot; value=&quot;UTF-8&quot; /&amp;gt;
                          &amp;lt;/bean&amp;gt;
                      &amp;lt;/list&amp;gt;
                      &amp;lt;!-- &amp;lt;list&amp;gt;  
                          &amp;lt;value&amp;gt;text/plain;charset=UTF-8&amp;lt;/value&amp;gt;  
                          &amp;lt;value&amp;gt;text/html;charset=UTF-8&amp;lt;/value&amp;gt;  
                      &amp;lt;/list&amp;gt; --&amp;gt;
                  &amp;lt;/property&amp;gt;
              &amp;lt;/bean&amp;gt;
          &amp;lt;/list&amp;gt;
      &amp;lt;/property&amp;gt;
  &amp;lt;/bean&amp;gt;
	
  &amp;lt;!-- 自动扫描转化 标有@Controller注解的类为bean --&amp;gt;
  &amp;lt;context:component-scan base-package=&quot;com.test&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;　　３、编写控制器，以供测试，控制器代码如下：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  @Controller
  public class TestController {

      @RequestMapping(&quot;/test_index&quot;)
      public ModelAndView index(HttpServletRequest req) {
          ModelAndView mav = new ModelAndView(&quot;index&quot;);
          mav.addObject(&quot;pix&quot;, pix);
          return mav;
      }
  }
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;至此，第一部分SpringMVC基本配置完成，第二部分内容为SpringMVC集成Freemark输出模板页面。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;springmvcfreemark&quot;&gt;第二部分：SpringMVC集成Freemark输出模板页面&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;添加Freemark的pom依赖，如下：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;&amp;lt;!-- Freemarker --&amp;gt;
&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;org.freemarker&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;freemarker&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;2.3.20&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在spring-mvc.xml中设置使用Freemark为视图解析器，如下：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  &amp;lt;!-- FreeMarker基础支持 --&amp;gt;  
  &amp;lt;bean id=&quot;freemarkerConfigurer&quot; class=&quot;org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer&quot;&amp;gt;  
      &amp;lt;property name=&quot;templateLoaderPath&quot; value=&quot;/view/&quot; /&amp;gt;
      &amp;lt;property name=&quot;defaultEncoding&quot; value=&quot;UTF-8&quot; /&amp;gt;
      &amp;lt;property name=&quot;freemarkerSettings&quot;&amp;gt;
          &amp;lt;props&amp;gt;
              &amp;lt;prop key=&quot;template_update_delay&quot;&amp;gt;10&amp;lt;/prop&amp;gt;
              &amp;lt;prop key=&quot;locale&quot;&amp;gt;zh_CN&amp;lt;/prop&amp;gt;
              &amp;lt;prop key=&quot;datetime_format&quot;&amp;gt;yyyy-MM-dd HH:mm:ss&amp;lt;/prop&amp;gt;
              &amp;lt;prop key=&quot;date_format&quot;&amp;gt;yyyy-MM-dd&amp;lt;/prop&amp;gt;
              &amp;lt;prop key=&quot;number_format&quot;&amp;gt;#.##&amp;lt;/prop&amp;gt;
          &amp;lt;/props&amp;gt;
      &amp;lt;/property&amp;gt;
  &amp;lt;/bean&amp;gt;
  &amp;lt;!-- FreeMarker视图解析 --&amp;gt;
  &amp;lt;bean id=&quot;viewResolver&quot; class=&quot;org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver&quot;&amp;gt;  
      &amp;lt;property name=&quot;viewClass&quot; value=&quot;org.springframework.web.servlet.view.freemarker.FreeMarkerView&quot; /&amp;gt;
      &amp;lt;property name=&quot;suffix&quot; value=&quot;.ftl&quot; /&amp;gt;
      &amp;lt;property name=&quot;contentType&quot; value=&quot;text/html;charset=UTF-8&quot; /&amp;gt;
      &amp;lt;property name=&quot;exposeRequestAttributes&quot; value=&quot;true&quot; /&amp;gt;
      &amp;lt;property name=&quot;exposeSessionAttributes&quot; value=&quot;true&quot; /&amp;gt;
      &amp;lt;property name=&quot;exposeSpringMacroHelpers&quot; value=&quot;true&quot; /&amp;gt;
  &amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;控制器中进行测试&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  @RequestMapping(&quot;/test_ftl&quot;)
  public ModelAndView index(HttpServletRequest req) {
      String pix = req.getParameter(&quot;pix&quot;);
		
      ModelAndView mav = new ModelAndView(&quot;index&quot;);
      mav.addObject(&quot;pix&quot;, pix);
      return mav;
  }
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;第二部分SpringMVC集成Freemark输出模板页面至此完成。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;springmvcjson&quot;&gt;第三部分：配置SpringMVC输出JSON格式的数据&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;在pom文件中添加对Jackson的依赖，如下：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;    &amp;lt;!-- JSON for Spring MVC --&amp;gt;
    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;org.codehaus.jackson&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;jackson-core-asl&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;1.8.0&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;org.codehaus.jackson&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;jackson-mapper-asl&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;1.9.7&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;org.codehaus.jackson&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;jackson-jaxrs&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;1.8.0&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;org.codehaus.jackson&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;jackson-xc&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;1.8.0&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在spring-mvc.xml中配置JSON格式的支持，如下：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  &amp;lt;!-- Spring MVC JSON输出格式 --&amp;gt;
  &amp;lt;bean id=&quot;mappingJacksonHttpMessageConverter&quot; class=&quot;org.springframework.http.converter.json.MappingJacksonHttpMessageConverter&quot;&amp;gt;
      &amp;lt;property name=&quot;supportedMediaTypes&quot;&amp;gt;
          &amp;lt;list&amp;gt;
              &amp;lt;value&amp;gt;application/json;charset=UTF-8&amp;lt;/value&amp;gt;
              &amp;lt;value&amp;gt;text/html;charset=UTF-8&amp;lt;/value&amp;gt;
          &amp;lt;/list&amp;gt;
      &amp;lt;/property&amp;gt;
  &amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;并将Jackson的实体引入到AnnotationMethodHandlerAdapter类的messageConverters属性当中，如下：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  &amp;lt;bean class=&quot;org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter&quot;&amp;gt;
      &amp;lt;property name=&quot;messageConverters&quot;&amp;gt;
          &amp;lt;list&amp;gt;
              &amp;lt;!-- JSON文本输出格式 --&amp;gt;
              &amp;lt;ref bean=&quot;mappingJacksonHttpMessageConverter&quot; /&amp;gt;
              &amp;lt;!-- 简单文本输出格式 --&amp;gt;
              &amp;lt;ref bean=&quot;mappingStringHttpMessageConverter&quot; /&amp;gt;
          &amp;lt;/list&amp;gt;
      &amp;lt;/property&amp;gt;
  &amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在控制器中编写JSON格式测试方法，如下：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  @RequestMapping(&quot;/test_json&quot;)
  @ResponseBody
  public JSONObject testJson(Long id, String name) {
      JSONObject obj = new JSONObject();
      obj.put(&quot;id&quot;, id);
      obj.put(&quot;name&quot;, name);
      return obj;
  }
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;至此，SpringMVC对输出JSON格式的配置也已完成。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;　　到此为止，已经可以使用SpringMVC进行常见的开发工作，如有更多内容将会陆续补充上来。&lt;/p&gt;
&lt;/blockquote&gt;

</description>
    </item>
    
    <item>
      <title>JQuery+HTML实现年会摇奖小工具</title>
      <link>place_your_blog_url_here/frontend/2015/02/16/random-nums-tool.html</link>
      <pubDate>16 Feb 2015</pubDate>
      <author>place_your_name_here</author>
      <guid>place_your_blog_url_here/frontend/2015/02/16/random-nums-tool</guid>
      <description>&lt;h2 id=&quot;jqueryhtml&quot;&gt;JQuery+HTML实现年会摇奖小工具&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;临近年关，想必大家都会期待这一年的公司年会，又会有一些什么样的精彩活动。而就在昨天，以前的人事同事要求我帮写个年会摇奖小工具，以供年会抽奖使用。我简单分析了下思路，觉得还挺有意思的，于是就用JQuery+HTML写了个小网页。实现并不复杂，当然也可能不够好，大神们轻喷。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;需求背景：&lt;/p&gt;

    &lt;p&gt;　　首先由工作人员为员工们发配个人编号（连续数字），然后在工具中设置抽奖数字区间（即个人编号的范围），之后点击“摇奖”按钮进行摇号，点击“停止”按钮后，确认一个区间内数字，即为中奖号，而该号对应编号的同事即为中奖人了。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;实现思路：&lt;/p&gt;

    &lt;p&gt;　　首先定义两个数组：一为&lt;code&gt;号码数组&lt;/code&gt;，将摇号的所有数字打乱次序后，放入其中；另外一个则是&lt;code&gt;中奖数组&lt;/code&gt;，将中奖号码从号码数组中删去，存入到中奖数组中。&lt;/p&gt;

    &lt;p&gt;　　定义好数组变量后，还需要一个&lt;code&gt;旗帜变量&lt;/code&gt;，作为摇奖进行中与停止的标志。编写一个主函数，定时地进行执行，根据旗帜变量进行相应的操作：在摇奖过程中时，将号码数组的所有数字依依快速地显示到显示框中；在停止后，选定当时显示的数字作为中奖数字，并停止定时执行。实现如下:	　　&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  //主函数
  var range = [];//号码数组
  var prize = [];//中奖数组
  var inGame = false;//旗帜变量
  var exe_i = 0;//当前执行到的下标
  function main() {
      if(inGame) {//继续执行
          //操作数组下标
          exe_i++;
          if(exe_i &amp;gt;= range.length) exe_i = 0;

          //显示数组内容
          $stage.html(range[exe_i]);

          //数组长度不够时自动结束
          if(range.length &amp;lt;= 1) inGame = false;
      } else {//结束游戏
          var cur = range[exe_i];//当前号码

          //更新数组数据
          prize.push(cur);
          range.splice(exe_i, 1);

          //显示结果
          console.log(&#39;下标:&#39; + exe_i + &#39;;数字:&#39; + cur);
          alert(&#39;摇中号码：&#39; + cur);
          msg();

          //停止定时任务
          window.clearInterval(mainInterval);
      }
  }
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;　　有了主函数，工具已经完成了一大半，现在还需要一个触发的函数作为开始与停止操作的触发者。点击“开始”按钮时修改状态位为开始状态并开始定时执行主函数，而点击“停止”按钮时修改旗帜变量状态位为停止状态，主函数会根据状态为进入到停止操作。实现如下：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  //触发函数
  var mainInterval;//定时执行任务标识，通过它可以取消定时执行
  function play() {
      if(inGame) {//执行时触发 -&amp;gt; 停止
          inGame = false;
      } else {//非执行状态触发 -&amp;gt; 开始
          //检查执行环境
          if(range.length &amp;lt;= 0) {
              alert(&#39;没号了，加几个进来呗&#39;);
              return;
          }
			
          //开始执行
          inGame = true;
          mainInterval = self.setInterval(&#39;main()&#39;, 50);
      }
  }
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;　　至此核心部分已经基本完成，当然还缺少一些细节的控制，比如：需要提供输入框进行交互；需要根据输入区间产生乱序的号码数组等，这里就不再赘述了，当然，最后还需要对界面美化一下~
  　　&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;结果展示：&lt;/p&gt;

    &lt;p&gt;　　这里再提供一下最终完成的作品（背景图是人事MM找来的，原来丑得惨不忍睹。。。），&lt;a href=&quot;/example/random-nums/index.html&quot;&gt;点我查看&lt;/a&gt;，详细代码就请点&lt;code&gt;审查元素&lt;/code&gt;咯 ^_^&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>第一篇文章</title>
      <link>place_your_blog_url_here/other/2015/01/13/HelloWorld.html</link>
      <pubDate>13 Jan 2015</pubDate>
      <author>place_your_name_here</author>
      <guid>place_your_blog_url_here/other/2015/01/13/HelloWorld</guid>
      <description>&lt;h2 id=&quot;hello-world&quot;&gt;Hello World&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;一直想在Github上搭建个个人博客，来做一些学习及生活方面的笔记，今天终于是实现了。建立博客的原因，一方面是供自己回忆与归纳整理，另一方面也作为与朋友们分享的一些内容，希望能够共同学习，共同进步。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;技术实现主要是通过Ruby的Jekyll框架（搭配3-Jekyll皮肤），在本地写好MarkDown笔记后编译同步到Github空间来发布&lt;code&gt;（想学来找我啊）&lt;/code&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;内容不出意外将以Java知识为主，也会记录一些自己对编程的思考与学习笔记，当然也会有一些好用工具的分享，以及部分生活娱乐方面的分享，希望内容将能日渐充实起来，也希望能够分享出一些精彩的内容。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    
  </channel>
</rss>