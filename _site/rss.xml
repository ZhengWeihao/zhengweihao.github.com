<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0" />
    <link rel="shortcut icon" href="/imgs/fav.ico">
    <!--[if lte IE 9]><meta http-equiv="refresh" content="0;url=/ie.html"><![endif]-->
    <title></title>
    <meta name="description" content="">
    <link rel="stylesheet" type="text/css" href="/assets/css/style.css">
    </style>
  </head>
  <body>
    <aside id="sidebar">
      <nav id="tags">
        <a href="/index.html" id="avatar"></a>

        <ul id="tags__ul">
          <li id="js-label1" class="tags__li tags-btn active">All Posts</li>
          <li id="js-label2" class="tags__li tags-btn">Java相关</li>
          <li id="js-label3" class="tags__li tags-btn">摄影相关</li>
        </ul>

        <div id="tags__bottom">
          <a href="mailto:place_your_email_address_here" id="icon-email" class="tags-btn fontello"></a>
          <a href="/rss.xml" id="icon-feed" class="tags-btn fontello"></a>
        </div>
      </nav> <!-- end #tags -->

      <div id="posts-list">
        <form action="" id="search-form">
          <a href="/index.html" id="mobile-avatar"></a>
          <!-- NOTE: input field is disabled by default -->
          <input id="search-input" type="text" placeholder="Search..." disabled >
        </form>

        <nav id="pl__container">
        
          <a class="java spring pl__all" href="/java/spring/2018/02/23/spring.html"><span class="pl__circle"></span><span class="pl__title">Spring学习笔记</span><span class="pl__date">Feb 2018</span></a>
        
          <a class="java jenkins pl__all" href="/java/jenkins/2018/02/23/jenkins.html"><span class="pl__circle"></span><span class="pl__title">Jenkins学习笔记</span><span class="pl__date">Feb 2018</span></a>
        
          <a class="java designPattern pl__all" href="/java/designpattern/2018/02/23/design-pattern.html"><span class="pl__circle"></span><span class="pl__title">常用设计模式总结</span><span class="pl__date">Feb 2018</span></a>
        
          <a class="java idea pl__all" href="/java/idea/2018/01/23/idea-keymap.html"><span class="pl__circle"></span><span class="pl__title">IDEA常用操作</span><span class="pl__date">Jan 2018</span></a>
        
          <a class="photo style color pl__all" href="/photo/style/color/2018/01/22/photo-styles-colors.html"><span class="pl__circle"></span><span class="pl__title">常见照片风格色调总结</span><span class="pl__date">Jan 2018</span></a>
        
          <a class="java jvm pl__all" href="/java/jvm/2018/01/22/java-jvm.markdown.html"><span class="pl__circle"></span><span class="pl__title">JVM笔记</span><span class="pl__date">Jan 2018</span></a>
        
          <a class="java pl__all" href="/java/2018/01/22/java-common.html"><span class="pl__circle"></span><span class="pl__title">Java常用操作笔记</span><span class="pl__date">Jan 2018</span></a>
        
          <a class="java spring pl__all" href="/java/spring/2017/11/23/docker.html"><span class="pl__circle"></span><span class="pl__title">Docker常用命令</span><span class="pl__date">Nov 2017</span></a>
        
          <a class="java concurrent pl__all" href="/java/concurrent/2016/07/12/java-concurrent.html"><span class="pl__circle"></span><span class="pl__title">Java并发编程笔记</span><span class="pl__date">Jul 2016</span></a>
        
          <a class="osx system pl__all" href="/osx/system/2015/10/28/osx-operates.html"><span class="pl__circle"></span><span class="pl__title">OSX常用操作笔记</span><span class="pl__date">Oct 2015</span></a>
        
          <a class="frontend cordova pl__all" href="/frontend/cordova/2015/03/20/css3-snowflake.html"><span class="pl__circle"></span><span class="pl__title">JQuery+CSS3实现雪花飘落效果</span><span class="pl__date">Mar 2015</span></a>
        
          <a class="frontend cordova pl__all" href="/frontend/cordova/2015/03/20/cordova-first.html"><span class="pl__circle"></span><span class="pl__title">Cordova开发笔记</span><span class="pl__date">Mar 2015</span></a>
        
          <a class="backend java spring springMVC pl__all" href="/backend/java/spring/springmvc/2015/02/16/spring-mvc-freemark.html"><span class="pl__circle"></span><span class="pl__title">SpringMVC集成Freemark及JSON格式输出</span><span class="pl__date">Feb 2015</span></a>
        
          <a class="frontend pl__all" href="/frontend/2015/02/16/random-nums-tool.html"><span class="pl__circle"></span><span class="pl__title">JQuery+HTML实现年会摇奖小工具</span><span class="pl__date">Feb 2015</span></a>
        
        </nav>
      </div> <!-- end #posts-list -->
    </aside> <!-- end #sidebar -->

    <div id="post">
      <div id="pjax">
        <?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>place_your_blog_title_here</title>
    <link>place_your_blog_url_here</link>
    <atom:link href="place_your_blog_url_here/rss.xml" rel="self" type="application/rss+xml" />
    <description>place_your_blog_description_here</description>
    <language>place_your_blog_language_here</language>
    <pubDate>Fri, 23 Feb 2018 20:06:06 +0800</pubDate>
    <lastBuildDate>Fri, 23 Feb 2018 20:06:06 +0800</lastBuildDate>

    
    <item>
      <title>Spring学习笔记</title>
      <link>place_your_blog_url_here/java/spring/2018/02/23/spring.html</link>
      <pubDate>23 Feb 2018</pubDate>
      <author>place_your_name_here</author>
      <guid>place_your_blog_url_here/java/spring/2018/02/23/spring</guid>
      <description>&lt;h2 id=&quot;spring学习笔记&quot;&gt;Spring学习笔记&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;特点：
    &lt;ul&gt;
      &lt;li&gt;轻量&lt;/li&gt;
      &lt;li&gt;面向Bean&lt;/li&gt;
      &lt;li&gt;松耦合&lt;/li&gt;
      &lt;li&gt;无缝集成主流框架&lt;/li&gt;
      &lt;li&gt;设计模式&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;简化开发的方式：
    &lt;ul&gt;
      &lt;li&gt;基于POJO的轻量级和最小侵入性编程&lt;/li&gt;
      &lt;li&gt;通过依赖注入和面向接口松耦合&lt;/li&gt;
      &lt;li&gt;基于切面和惯性进行声明式编程&lt;/li&gt;
      &lt;li&gt;通过切面和模板减少样板式代码&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;面向Bean编程（Bean Oriented Programming，BOP）
    &lt;ul&gt;
      &lt;li&gt;控制反转（Inversion Of Control，IOC）
        &lt;ul&gt;
          &lt;li&gt;概念：通过容器来控制业务与对象之间的依赖关系，而非代码直接控制&lt;/li&gt;
          &lt;li&gt;原理：将实例化对象存储到IOC容器中&lt;/li&gt;
          &lt;li&gt;优点：降低业务与对象之间的依赖程度&lt;/li&gt;
          &lt;li&gt;缺点：启动慢、占用内存多、构造对象慢&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;依赖注入（Dependency Injection，DI）
        &lt;ul&gt;
          &lt;li&gt;提供注解：
            &lt;ul&gt;
              &lt;li&gt;@Autowrite Interface i：自动注入实现类&lt;/li&gt;
              &lt;li&gt;@Resource(BEAN_ID)：根据IOC容器中的BeanID注入&lt;/li&gt;
              &lt;li&gt;@Autowrite Class c：根据类型自动注入&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;注入方式：
            &lt;ul&gt;
              &lt;li&gt;Setter&lt;/li&gt;
              &lt;li&gt;构造方法&lt;/li&gt;
              &lt;li&gt;强制赋值&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;面向切面编程（Oriented Programming，AOP）
        &lt;ul&gt;
          &lt;li&gt;概念：可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，提高开发效率&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    
    <item>
      <title>Jenkins学习笔记</title>
      <link>place_your_blog_url_here/java/jenkins/2018/02/23/jenkins.html</link>
      <pubDate>23 Feb 2018</pubDate>
      <author>place_your_name_here</author>
      <guid>place_your_blog_url_here/java/jenkins/2018/02/23/jenkins</guid>
      <description>&lt;h2 id=&quot;jenkins学习笔记&quot;&gt;Jenkins学习笔记&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;目的
    &lt;ul&gt;
      &lt;li&gt;持续集成（Continuous integration）：软件研发中，部分向整体交付，以便尽早发现部分开发的问题&lt;/li&gt;
      &lt;li&gt;持续交付（Continuous Delivery）：尽快地向客户交付，以便尽早发现生产环境中存在的问题&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;安装
    &lt;ul&gt;
      &lt;li&gt;https://jenkins.io/download&lt;/li&gt;
      &lt;li&gt;java -jar JAR_FILE –port PORT&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;配置（Manage Jenkins）：
    &lt;ul&gt;
      &lt;li&gt;Config System：
        &lt;ul&gt;
          &lt;li&gt;Maven Project Configuration&lt;/li&gt;
          &lt;li&gt;Gitlab &amp;amp; SSHKey&lt;/li&gt;
          &lt;li&gt;E-mail Notification&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Manager Plugins：
        &lt;ul&gt;
          &lt;li&gt;Gitlab Logo Plugin&lt;/li&gt;
          &lt;li&gt;Gitlab Hook Plugin&lt;/li&gt;
          &lt;li&gt;Deploy to container Plugin&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;New Item：
        &lt;ul&gt;
          &lt;li&gt;Source Code Management：
            &lt;ul&gt;
              &lt;li&gt;Git：
                &lt;ul&gt;
                  &lt;li&gt;Repository URL&lt;/li&gt;
                  &lt;li&gt;Credentials&lt;/li&gt;
                  &lt;li&gt;Branches to build：编译的分支，支持通配符&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;Build Triggers：触发器
                &lt;ul&gt;
                  &lt;li&gt;Build when change is pushed to GitLab&lt;/li&gt;
                  &lt;li&gt;GitHub hook trigger for GITScm polling&lt;/li&gt;
                  &lt;li&gt;Poll SCM&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;Pre Steps&lt;/li&gt;
              &lt;li&gt;Build：
                &lt;ul&gt;
                  &lt;li&gt;Root POM&lt;/li&gt;
                  &lt;li&gt;Goals and options：clean install -U -D maven.test.skip=true -P test&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;Post Steps：
                &lt;ul&gt;
                  &lt;li&gt;Execute Shell（自定义\批量发布）&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;Build Settings
                &lt;ul&gt;
                  &lt;li&gt;E-mail Notification&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;Post-build Actions：
                &lt;ul&gt;
                  &lt;li&gt;Deploy war/ear to a container（单台发布）：
                    &lt;ul&gt;
                      &lt;li&gt;WAR/EAR files&lt;/li&gt;
                      &lt;li&gt;Context path&lt;/li&gt;
                      &lt;li&gt;Containers：Tomcat&lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                  &lt;li&gt;Editable Email Notification&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;GitLab设置：
    &lt;ul&gt;
      &lt;li&gt;Settings-Integrations-Webhooks&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    
    <item>
      <title>常用设计模式总结</title>
      <link>place_your_blog_url_here/java/designpattern/2018/02/23/design-pattern.html</link>
      <pubDate>23 Feb 2018</pubDate>
      <author>place_your_name_here</author>
      <guid>place_your_blog_url_here/java/designpattern/2018/02/23/design-pattern</guid>
      <description>&lt;h2 id=&quot;常用设计模式总结&quot;&gt;常用设计模式总结&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;特点：
​&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    
    <item>
      <title>IDEA常用操作</title>
      <link>place_your_blog_url_here/java/idea/2018/01/23/idea-keymap.html</link>
      <pubDate>23 Jan 2018</pubDate>
      <author>place_your_name_here</author>
      <guid>place_your_blog_url_here/java/idea/2018/01/23/idea-keymap</guid>
      <description>&lt;h2 id=&quot;idea常用操作&quot;&gt;IDEA常用操作&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;初始设置：
    &lt;ul&gt;
      &lt;li&gt;Maven设置（UserSetting、Automatically Download）&lt;/li&gt;
      &lt;li&gt;JDK设置&lt;/li&gt;
      &lt;li&gt;FileEncoding&lt;/li&gt;
      &lt;li&gt;自动导入包：General-AutoImport&lt;/li&gt;
      &lt;li&gt;打开多个项目方式：Appearance-SystemSetting-Project Opering&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;常用实时模板：
    &lt;ul&gt;
      &lt;li&gt;psvm&lt;/li&gt;
      &lt;li&gt;sout&lt;/li&gt;
      &lt;li&gt;fori&lt;/li&gt;
      &lt;li&gt;ifn&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;调试：
    &lt;ul&gt;
      &lt;li&gt;F7：进入下一步，且进入方法体&lt;/li&gt;
      &lt;li&gt;F8：进入下一步，且不进入方法体&lt;/li&gt;
      &lt;li&gt;F9：恢复运行，且在下个断点暂停&lt;/li&gt;
      &lt;li&gt;alt+F8：输入代码并查看执行结果&lt;/li&gt;
      &lt;li&gt;Condition：右击断点，选择Condition&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;常用快捷键：
    &lt;ul&gt;
      &lt;li&gt;光标操作：
        &lt;ul&gt;
          &lt;li&gt;跳转指定行：ctrl+g（command+g）&lt;/li&gt;
          &lt;li&gt;进入光标所在方法：ctrl+b（command+b）&lt;/li&gt;
          &lt;li&gt;返回历史光标位置：alt+ctrl+←/→（alt+command+←/→）&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;一般操作：
        &lt;ul&gt;
          &lt;li&gt;代码提示：ctrl+space（control+space）&lt;/li&gt;
          &lt;li&gt;导入包：alt+enter（option+enter）&lt;/li&gt;
          &lt;li&gt;查找定位：ctrl+shift+n（command+shift+n） [CLASS_NAME:LINE_NUMBER]&lt;/li&gt;
          &lt;li&gt;代码生成：alt+insert（control+n, control+enter）&lt;/li&gt;
          &lt;li&gt;切换窗口：ctrl+tab（control+tab）&lt;/li&gt;
          &lt;li&gt;最近打开的文件：ctrl+e（command+e）&lt;/li&gt;
          &lt;li&gt;切换全屏模式：shift+ctrl+f12（shift+command+f12）&lt;/li&gt;
          &lt;li&gt;显示LIveTemplate：ctrl+j（command+j）&lt;/li&gt;
          &lt;li&gt;面板：
            &lt;ul&gt;
              &lt;li&gt;导航面板：ctrl+1（command+1）&lt;/li&gt;
              &lt;li&gt;控制台面板：ctrl+4（command+4）&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;查看当前类的所有方法：ctrl+f12(command+f12)&lt;/li&gt;
          &lt;li&gt;错误解决：alt+enter（option+enter）&lt;/li&gt;
          &lt;li&gt;引入变量：ctrl+alt+v（command+option+v）&lt;/li&gt;
          &lt;li&gt;运行代码：alt+shift+f10（option+shift+f10）&lt;/li&gt;
          &lt;li&gt;重命名：shift+f6&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;编辑区：
        &lt;ul&gt;
          &lt;li&gt;删除一行：ctrl+y（command+y）&lt;/li&gt;
          &lt;li&gt;复制一行：ctrl+d（command+d）&lt;/li&gt;
          &lt;li&gt;注释：ctrl+/（command+/）&lt;/li&gt;
          &lt;li&gt;按语法选择：[shift] ctrl+w（command+w）&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;查找：
        &lt;ul&gt;
          &lt;li&gt;类/资源查找：ctrl+n（command+n）&lt;/li&gt;
          &lt;li&gt;全局查找：shift+shift&lt;/li&gt;
          &lt;li&gt;内容查找：ctrl+shift+n（command+shift+n）&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;格式化：
        &lt;ul&gt;
          &lt;li&gt;import：ctrl+alt+o（command+alt+o）&lt;/li&gt;
          &lt;li&gt;代码：ctrl+alt+l（command+alt+l）&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>常见照片风格色调总结</title>
      <link>place_your_blog_url_here/photo/style/color/2018/01/22/photo-styles-colors.html</link>
      <pubDate>22 Jan 2018</pubDate>
      <author>place_your_name_here</author>
      <guid>place_your_blog_url_here/photo/style/color/2018/01/22/photo-styles-colors</guid>
      <description>&lt;h2 id=&quot;常见照片风格色调总结&quot;&gt;常见照片风格色调总结&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;小清新：
    &lt;ul&gt;
      &lt;li&gt;整体调性：亮调、通透&lt;/li&gt;
      &lt;li&gt;高光：&lt;font color=&quot;#4ce6e3&quot;&gt;青色&lt;/font&gt;、&lt;font color=&quot;#50c9e0&quot;&gt;蓝色&lt;/font&gt;&lt;/li&gt;
      &lt;li&gt;阴影：&lt;font color=&quot;#4ce6e3&quot;&gt;青色&lt;/font&gt;、&lt;font color=&quot;#50c9e0&quot;&gt;蓝色&lt;/font&gt;、&lt;font color=&quot;#25a726&quot;&gt;绿色&lt;/font&gt;&lt;/li&gt;
      &lt;li&gt;整体感受：轻快明亮&lt;/li&gt;
      &lt;li&gt;常见元素：蓝天、绿草、微风&lt;/li&gt;
      &lt;li&gt;典型图例：
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;/imgs/photo-styles-colors/小清新.jpg&quot; alt=&quot;小清新&quot; width=&quot;600px&quot; /&gt;&lt;/li&gt;
          &lt;li&gt;&lt;img src=&quot;/imgs/photo-styles-colors/小清新2.jpg&quot; alt=&quot;小清新2&quot; width=&quot;600px&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;复古：
    &lt;ul&gt;
      &lt;li&gt;整体调性：暗调、偏灰、部分低饱和&lt;/li&gt;
      &lt;li&gt;高光：&lt;font color=&quot;#4ce6e3&quot;&gt;青色&lt;/font&gt;、&lt;font color=&quot;#25a726&quot;&gt;绿色&lt;/font&gt;、&lt;font color=&quot;#f9f846&quot;&gt;黄色&lt;/font&gt;&lt;/li&gt;
      &lt;li&gt;阴影：&lt;font color=&quot;#4ce6e3&quot;&gt;青色&lt;/font&gt;、&lt;font color=&quot;#25a726&quot;&gt;绿色&lt;/font&gt;、&lt;font color=&quot;#f9f846&quot;&gt;黄色&lt;/font&gt;&lt;/li&gt;
      &lt;li&gt;整体感受：阴郁&lt;/li&gt;
      &lt;li&gt;常见元素：老墙、老家具、木地板&lt;/li&gt;
      &lt;li&gt;典型图例：
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;/imgs/photo-styles-colors/复古.jpg&quot; alt=&quot;复古&quot; width=&quot;600px&quot; /&gt;&lt;/li&gt;
          &lt;li&gt;&lt;img src=&quot;/imgs/photo-styles-colors/复古2.jpg&quot; alt=&quot;复古2&quot; width=&quot;600px&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;日系：
    &lt;ul&gt;
      &lt;li&gt;整体调性：轻微过曝&lt;/li&gt;
      &lt;li&gt;高光：&lt;font color=&quot;#f9f846&quot;&gt;黄色&lt;/font&gt;&lt;/li&gt;
      &lt;li&gt;阴影：&lt;font color=&quot;#4ce6e3&quot;&gt;青色&lt;/font&gt;、&lt;font color=&quot;#50c9e0&quot;&gt;蓝色&lt;/font&gt;、&lt;font color=&quot;#25a726&quot;&gt;绿色&lt;/font&gt;&lt;/li&gt;
      &lt;li&gt;整体感受：干净、温暖&lt;/li&gt;
      &lt;li&gt;常见元素：夕阳光&lt;/li&gt;
      &lt;li&gt;典型图例：
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;/imgs/photo-styles-colors/日系.jpg&quot; alt=&quot;日系&quot; width=&quot;600px&quot; /&gt;&lt;/li&gt;
          &lt;li&gt;&lt;img src=&quot;/imgs/photo-styles-colors/日系2.jpeg&quot; alt=&quot;日系2&quot; width=&quot;600px&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;港调：
    &lt;ul&gt;
      &lt;li&gt;整体调性：暗调、朦胧&lt;/li&gt;
      &lt;li&gt;高光：&lt;font color=&quot;#846e54&quot;&gt;棕色&lt;/font&gt;、&lt;font color=&quot;#f9f846&quot;&gt;黄色&lt;/font&gt;、&lt;font color=&quot;#da37c9&quot;&gt;洋红色&lt;/font&gt;&lt;/li&gt;
      &lt;li&gt;阴影：&lt;font color=&quot;#846e54&quot;&gt;棕色&lt;/font&gt;、&lt;font color=&quot;#f9f846&quot;&gt;黄色&lt;/font&gt;&lt;/li&gt;
      &lt;li&gt;整体感受：老旧、浓郁&lt;/li&gt;
      &lt;li&gt;常见元素：大波浪、旗袍/纱裙&lt;/li&gt;
      &lt;li&gt;典型图例：
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;/imgs/photo-styles-colors/港调.jpg&quot; alt=&quot;港调&quot; width=&quot;600px&quot; /&gt;&lt;/li&gt;
          &lt;li&gt;&lt;img src=&quot;/imgs/photo-styles-colors/港调2.png&quot; alt=&quot;港调2&quot; width=&quot;600px&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;欧美：
    &lt;ul&gt;
      &lt;li&gt;整体调性：暗调&lt;/li&gt;
      &lt;li&gt;高光：&lt;font color=&quot;#e49e28&quot;&gt;橙色&lt;/font&gt;、&lt;font color=&quot;#f9f846&quot;&gt;黄色&lt;/font&gt;&lt;/li&gt;
      &lt;li&gt;阴影：&lt;font color=&quot;#50c9e0&quot;&gt;蓝色&lt;/font&gt;、&lt;font color=&quot;#4ce6e3&quot;&gt;青色&lt;/font&gt;、&lt;font color=&quot;#25a726&quot;&gt;绿色&lt;/font&gt;&lt;/li&gt;
      &lt;li&gt;整体感受：个性另类&lt;/li&gt;
      &lt;li&gt;常见元素：灰墙、高楼&lt;/li&gt;
      &lt;li&gt;典型图例：
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;/imgs/photo-styles-colors/欧美.jpg&quot; alt=&quot;欧美&quot; width=&quot;600px&quot; /&gt;&lt;/li&gt;
          &lt;li&gt;&lt;img src=&quot;/imgs/photo-styles-colors/欧美2.jpg&quot; alt=&quot;欧美2&quot; width=&quot;600px&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;测试说明：
    &lt;ul&gt;
      &lt;li&gt;测试目的在于调整色彩以验证以上观点，须主观上排除照片本身题材的干扰&lt;/li&gt;
      &lt;li&gt;测试原图：
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;/imgs/photo-styles-colors/example.png&quot; alt=&quot;example_小清新&quot; width=&quot;600px&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;小清新：
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;/imgs/photo-styles-colors/example_小清新.png&quot; alt=&quot;example_小清新&quot; width=&quot;600px&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;复古：
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;/imgs/photo-styles-colors/example_复古.png&quot; alt=&quot;example_小清新&quot; width=&quot;600px&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;日系：
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;/imgs/photo-styles-colors/example_日系.png&quot; alt=&quot;example_小清新&quot; width=&quot;600px&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;港调：
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;/imgs/photo-styles-colors/example_港调.png&quot; alt=&quot;example_小清新&quot; width=&quot;600px&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;欧美：
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;/imgs/photo-styles-colors/example_欧美.png&quot; alt=&quot;example_小清新&quot; width=&quot;600px&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;色彩感受：
    &lt;ul&gt;
      &lt;li&gt;活力、热情：&lt;font color=&quot;#f94646&quot;&gt;红色&lt;/font&gt;、&lt;font color=&quot;#e49e28&quot;&gt;橙色&lt;/font&gt;、&lt;font color=&quot;#f9f846&quot;&gt;黄色&lt;/font&gt;（高饱和、高明度）&lt;/li&gt;
      &lt;li&gt;静谧、轻盈：&lt;font color=&quot;#50c9e0&quot;&gt;蓝色&lt;/font&gt;（低饱和、高明度），多应用于小清新风格&lt;/li&gt;
      &lt;li&gt;怀旧、忧伤：&lt;font color=&quot;#846e54&quot;&gt;棕色&lt;/font&gt;（高饱和、低明度），多应用于复古风格&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;小技巧：
    &lt;ul&gt;
      &lt;li&gt;利用&lt;strong&gt;对比色&lt;/strong&gt;区分元素，凸显画面立体感&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;统一&lt;/strong&gt;画面色调，排除画面中多余的干扰物&lt;/li&gt;
      &lt;li&gt;对于细节多、颜色杂的照片，可以尝试调整为&lt;strong&gt;黑白色&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;注：&lt;/p&gt;

&lt;p&gt;　　各种风格的取色带有个人主观印象，不具备普适性，仅供参考。&lt;/p&gt;

&lt;p&gt;　　参考图片均来自网络，侵删。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JVM笔记</title>
      <link>place_your_blog_url_here/java/jvm/2018/01/22/java-jvm.markdown.html</link>
      <pubDate>22 Jan 2018</pubDate>
      <author>place_your_name_here</author>
      <guid>place_your_blog_url_here/java/jvm/2018/01/22/java-jvm.markdown</guid>
      <description>&lt;h2 id=&quot;jvm笔记&quot;&gt;JVM笔记&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;抽象结构：
    &lt;ul&gt;
      &lt;li&gt;实例域、静态域、数据 -&amp;gt; 堆内存（线程之间共享）&lt;/li&gt;
      &lt;li&gt;局部变量、方法定义的参数 -&amp;gt; 虚拟机栈&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    
    <item>
      <title>Java常用操作笔记</title>
      <link>place_your_blog_url_here/java/2018/01/22/java-common.html</link>
      <pubDate>22 Jan 2018</pubDate>
      <author>place_your_name_here</author>
      <guid>place_your_blog_url_here/java/2018/01/22/java-common</guid>
      <description>&lt;h2 id=&quot;java常用操作笔记&quot;&gt;Java常用操作笔记&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;查看字节码：
    &lt;ul&gt;
      &lt;li&gt;javap -v CLASS_FILE_NAME&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    
    <item>
      <title>Docker常用命令</title>
      <link>place_your_blog_url_here/java/spring/2017/11/23/docker.html</link>
      <pubDate>23 Nov 2017</pubDate>
      <author>place_your_name_here</author>
      <guid>place_your_blog_url_here/java/spring/2017/11/23/docker</guid>
      <description>&lt;h2 id=&quot;docker常用命令&quot;&gt;Docker常用命令&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;查看Docker信息：
    &lt;ul&gt;
      &lt;li&gt;docker info&lt;/li&gt;
      &lt;li&gt;docker version&lt;/li&gt;
      &lt;li&gt;
        &lt;table&gt;
          &lt;tbody&gt;
            &lt;tr&gt;
              &lt;td&gt;inspect [OPTIONS] NAME&lt;/td&gt;
              &lt;td&gt;ID [NAME&lt;/td&gt;
              &lt;td&gt;ID…] 查看已建容器/镜像详细信息&lt;/td&gt;
            &lt;/tr&gt;
          &lt;/tbody&gt;
        &lt;/table&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;容器相关：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;run [OPTIONS] IMAGE [COMMAND] _ [ARG…] 启动容器：
        &lt;ul&gt;
          &lt;li&gt;-i, –interactive：始终标准输入&lt;/li&gt;
          &lt;li&gt;-t, –tty：tty终端&lt;/li&gt;
          &lt;li&gt;-d, –detach：后台形式运行&lt;/li&gt;
          &lt;li&gt;–name NAME_STRING：命名&lt;/li&gt;
          &lt;li&gt;-P, –publish-all：随机映射端口号&lt;/li&gt;
          &lt;li&gt;-p, –publish list：指定端口映射，如：
            &lt;ul&gt;
              &lt;li&gt;-p 80：随机对应80端口&lt;/li&gt;
              &lt;li&gt;-p 8080:80：宿主对应容器&lt;/li&gt;
              &lt;li&gt;-p 0.0.0.0:80&lt;/li&gt;
              &lt;li&gt;-p 0.0.0.0:8080:80&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;ps [OPTIONS] 查看容器：
        &lt;ul&gt;
          &lt;li&gt;-a, –all： 全部&lt;/li&gt;
          &lt;li&gt;-l, –latest：最近的&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;start [OPTIONS] CONTAINER [CONTAINER…] 启动容器：
        &lt;ul&gt;
          &lt;li&gt;-i：交互方式&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;stop [OPTIONS] CONTAINER [CONTAINER…] 停止容器&lt;/li&gt;
      &lt;li&gt;kill [OPTIONS] CONTAINER [CONTAINER…] 强制停止容器&lt;/li&gt;
      &lt;li&gt;rm [OPTIONS] CONTAINER [CONTAINER…] 删除已停止容器&lt;/li&gt;
      &lt;li&gt;attach [OPTIONS] CONTAINER&lt;/li&gt;
      &lt;li&gt;守护式容器：启动后以Ctrl+P Ctrl+Q退出&lt;/li&gt;
      &lt;li&gt;top CONTAINER [ps OPTIONS] 显示容器中运行的线程&lt;/li&gt;
      &lt;li&gt;exec [OPTIONS] CONTAINER COMMAND [ARG…] 在运行的容器中执行命令&lt;/li&gt;
      &lt;li&gt;logs [OPTIONS] CONTAINER 查看容器的日志：
        &lt;ul&gt;
          &lt;li&gt;-f, –follow：实时跟踪日志&lt;/li&gt;
          &lt;li&gt;-t, –timestamps：显示时间戳&lt;/li&gt;
          &lt;li&gt;–tail string：显示指定行数的日志，默认”all”&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;镜像与仓库相关：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;images [OPTIONS] _ [REPOSITORY[:TAG]]
        &lt;ul&gt;
          &lt;li&gt;-a, –all：显示所有镜像&lt;/li&gt;
          &lt;li&gt;-f, –filter filter：过滤条件&lt;/li&gt;
          &lt;li&gt;–no-trunc：不阶段ID&lt;/li&gt;
          &lt;li&gt;-q, –quiet：仅显示ID&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;rmi [OPTIONS] IMAGE [IMAGE…] 删除镜像：
        &lt;ul&gt;
          &lt;li&gt;-f, –force：强制删除&lt;/li&gt;
          &lt;li&gt;–no-prune：保留标签镜像&lt;/li&gt;
          &lt;li&gt;动态删除镜像的方法：rmi $(docker images REPOSITORY -q)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;search [OPTIONS] TERM：查找镜像（默认一次最多显示25条）：
        &lt;ul&gt;
          &lt;li&gt;–automated=false：自动&lt;/li&gt;
          &lt;li&gt;–no-trunc：不截断显示&lt;/li&gt;
          &lt;li&gt;-s, –stars=0：根据星级查找&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;table&gt;
          &lt;tbody&gt;
            &lt;tr&gt;
              &lt;td&gt;pull [OPTIONS] NAME[:TAG&lt;/td&gt;
              &lt;td&gt;@DIGEST]：拉取镜像：&lt;/td&gt;
            &lt;/tr&gt;
          &lt;/tbody&gt;
        &lt;/table&gt;
        &lt;ul&gt;
          &lt;li&gt;-a, –all-tags：下载全部标签&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;push [OPTIONS] NAME[:TAG] 推送镜像&lt;/li&gt;
      &lt;li&gt;commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]] 为更改的容器创建新镜像&lt;/li&gt;
      &lt;li&gt;
        &lt;table&gt;
          &lt;tbody&gt;
            &lt;tr&gt;
              &lt;td&gt;build [OPTIONS] PTH&lt;/td&gt;
              &lt;td&gt;URL&lt;/td&gt;
              &lt;td&gt;- 根据Dockerfile构建镜像&lt;/td&gt;
            &lt;/tr&gt;
          &lt;/tbody&gt;
        &lt;/table&gt;
      &lt;/li&gt;
      &lt;li&gt;设置mirror：
        &lt;ul&gt;
          &lt;li&gt;/etc/default/docker中添加：
            &lt;ul&gt;
              &lt;li&gt;DOCKER_OPTS=–registry-mirror:MIRROR_URL&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Java并发编程笔记</title>
      <link>place_your_blog_url_here/java/concurrent/2016/07/12/java-concurrent.html</link>
      <pubDate>12 Jul 2016</pubDate>
      <author>place_your_name_here</author>
      <guid>place_your_blog_url_here/java/concurrent/2016/07/12/java-concurrent</guid>
      <description>&lt;h2 id=&quot;java并发编程笔记&quot;&gt;Java并发编程笔记&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;基本概念：
    &lt;ul&gt;
      &lt;li&gt;进程：程序&lt;/li&gt;
      &lt;li&gt;线程：进程中负责执行程序的执行单元&lt;/li&gt;
      &lt;li&gt;并发：以可独立执行的进程集合的方式编程&lt;/li&gt;
      &lt;li&gt;并行：以可同时执行的计算指令方式编程&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;背景：
    &lt;ul&gt;
      &lt;li&gt;串行服务的低响应速度及高CPU空闲率&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;多线程实现原理：
    &lt;ul&gt;
      &lt;li&gt;时间片调度&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;优点：
    &lt;ul&gt;
      &lt;li&gt;提高资源利用率&lt;/li&gt;
      &lt;li&gt;提高程序性能&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;风险：
    &lt;ul&gt;
      &lt;li&gt;死锁&lt;/li&gt;
      &lt;li&gt;上下文切换&lt;/li&gt;
      &lt;li&gt;线程安全&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;实现方式：
    &lt;ul&gt;
      &lt;li&gt;继承Thread类：单继承&lt;/li&gt;
      &lt;li&gt;实现Runnable接口：多实现&lt;/li&gt;
      &lt;li&gt;ExecutorService&lt;/li&gt;
      &lt;li&gt;Callable接口、Future类实现带返回值的多线程操作&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;生命周期：
    &lt;ul&gt;
      &lt;li&gt;创建：new Thread()&lt;/li&gt;
      &lt;li&gt;就绪：start()&lt;/li&gt;
      &lt;li&gt;运行：CPU调度，根据时间片轮询或yield方法切换就绪态&lt;/li&gt;
      &lt;li&gt;阻塞：sleep()/join()&lt;/li&gt;
      &lt;li&gt;终止：run结束或者Main结束&lt;/li&gt;
      &lt;li&gt;锁定：synchronized&lt;/li&gt;
      &lt;li&gt;等待：wait/notify&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;关键问题：
    &lt;ul&gt;
      &lt;li&gt;线程之间通信（线程之间交换信息）
        &lt;ul&gt;
          &lt;li&gt;共享内存：&lt;/li&gt;
          &lt;li&gt;消息传递：wait/notify/notifyAll&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;线程同步（控制不同线程操作发生的相对顺序）
        &lt;ul&gt;
          &lt;li&gt;共享内存的并发模型中，同步是显式进行，如：synchronized&lt;/li&gt;
          &lt;li&gt;消息传递的并发模型中，消息发送必须在消息接收之前，同步是隐式进行的&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;指令重排：
        &lt;ul&gt;
          &lt;li&gt;目的：提高程序性能&lt;/li&gt;
          &lt;li&gt;类型：
            &lt;ul&gt;
              &lt;li&gt;编译器优化的重排序：在不改变单线程程序语义的前提下，重新安排语句的执行顺序。&lt;/li&gt;
              &lt;li&gt;指令级并行的重排序：将多条指令重叠执行，如不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序。&lt;/li&gt;
              &lt;li&gt;内存系统的重排序：处理器使用缓存和读/&lt;strong&gt;写缓冲区&lt;/strong&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;弊端：内存可见性问题&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;控制线程执行的顺序：
        &lt;ul&gt;
          &lt;li&gt;join：让主线程等待子线程结束后才能继续运行&lt;/li&gt;
          &lt;li&gt;ExecutorService executor = Excutors.newSingleThreadExecutor();// 只有一个线程的线程池，操作不限数量的线程队列（FIFO队列 -&amp;gt; 排队处理）&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;线程池：
    &lt;ul&gt;
      &lt;li&gt;背景：
        &lt;ul&gt;
          &lt;li&gt;频繁使用线程的场景中，线程创建、销毁开销大，甚至会造成OOM&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;​&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;volatile关键字
    &lt;ul&gt;
      &lt;li&gt;支持：可见性、防止指令重排&lt;/li&gt;
      &lt;li&gt;不支持：复合操作的原子性&lt;/li&gt;
      &lt;li&gt;实现原理：
        &lt;ul&gt;
          &lt;li&gt;对volatile变量进行写操作时，后边代码中会加入Lock前缀指令：
            &lt;ul&gt;
              &lt;li&gt;将当前处理器缓存行的数据写回系统内存&lt;/li&gt;
              &lt;li&gt;使其他CPU里缓存了该内存地址的数据无效&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;在多处理器模式下实现缓存一致性协议：
            &lt;ul&gt;
              &lt;li&gt;每个处理器嗅探当前缓存值是否过期&lt;/li&gt;
              &lt;li&gt;过期数据设置为无效状态&lt;/li&gt;
              &lt;li&gt;下次操作重新读到缓存中&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;synchronized关键字：锁机制，隐式释放
    &lt;ul&gt;
      &lt;li&gt;支持：重入性、互斥性、可见性&lt;/li&gt;
      &lt;li&gt;不支持：超时等待、可中断性、公平性&lt;/li&gt;
      &lt;li&gt;实现原理：
        &lt;ul&gt;
          &lt;li&gt;monitorenter、monitorexit字节码指令&lt;/li&gt;
          &lt;li&gt;SynchronizedQueue（存储无法获取锁的线程）&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;释放时机：
        &lt;ul&gt;
          &lt;li&gt;代码块执行完成&lt;/li&gt;
          &lt;li&gt;线程执行出现异常&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;级别：
        &lt;ul&gt;
          &lt;li&gt;偏向锁：在对象头和栈帧中存储锁偏向的线程ID，以减少CAS操作&lt;/li&gt;
          &lt;li&gt;轻量级锁&lt;/li&gt;
          &lt;li&gt;重量级锁&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Lock接口：显式获取、释放锁，更适合竞争激烈场景（Java5推出的juc包中）
    &lt;ul&gt;
      &lt;li&gt;重入锁&lt;/li&gt;
      &lt;li&gt;读写锁&lt;/li&gt;
      &lt;li&gt;可中断锁&lt;/li&gt;
      &lt;li&gt;公平锁&lt;/li&gt;
      &lt;li&gt;可重入读写锁&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;分布式锁：
    &lt;ul&gt;
      &lt;li&gt;场景：
        &lt;ul&gt;
          &lt;li&gt;多项服务访问同个资源&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;实现方式：
        &lt;ul&gt;
          &lt;li&gt;数据库：
            &lt;ul&gt;
              &lt;li&gt;原理：
                &lt;ul&gt;
                  &lt;li&gt;lock表.method_name字段，增加唯一性约束，实现获取锁功能&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;缺点：
                &lt;ul&gt;
                  &lt;li&gt;记录删除失败&lt;/li&gt;
                  &lt;li&gt;不支持重入性&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;ZooKeeper：
            &lt;ul&gt;
              &lt;li&gt;原理：
                &lt;ul&gt;
                  &lt;li&gt;/Locks目录中写入methodName临时有序节点，当前最小节点获得锁&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;优点：
                &lt;ul&gt;
                  &lt;li&gt;Watch机制自动删除失效节点&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Redis：
            &lt;ul&gt;
              &lt;li&gt;原理：
                &lt;ul&gt;
                  &lt;li&gt;setnx命令：在key不存在时设置值，并返回0或1&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;死锁：
    &lt;ul&gt;
      &lt;li&gt;原因：
        &lt;ul&gt;
          &lt;li&gt;多把锁（哲学家问题）&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;解决方式：
        &lt;ul&gt;
          &lt;li&gt;全局顺序&lt;/li&gt;
          &lt;li&gt;超时时间（不能避免死锁）&lt;/li&gt;
          &lt;li&gt;可中断锁（不能避免死锁）&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;无锁化：
    &lt;ul&gt;
      &lt;li&gt;优点：
        &lt;ul&gt;
          &lt;li&gt;减少上下文切换&lt;/li&gt;
          &lt;li&gt;无须手动获取、释放锁&lt;/li&gt;
          &lt;li&gt;通用、高效、成熟&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;方法：
        &lt;ul&gt;
          &lt;li&gt;Hash取模分段处理&lt;/li&gt;
          &lt;li&gt;Atomic类&lt;/li&gt;
          &lt;li&gt;ReidsAtomic类（适用分布式环境）&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;原子操作：
    &lt;ul&gt;
      &lt;li&gt;实现原理：循环CAS，调用处理器的CMPXCHG指令&lt;/li&gt;
      &lt;li&gt;问题：
        &lt;ul&gt;
          &lt;li&gt;ABA问题：当值变回初始值时，CAS操作认为未变更。解决方案为：追加版本号。&lt;/li&gt;
          &lt;li&gt;长时间自旋将导致CPU开销大。JVM能支持处理器的pause指令将得到效率提升。&lt;/li&gt;
          &lt;li&gt;只能保证一个共享变量的原子操作。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;代码实践：
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/ZhengWeihao/JavaDemo/tree/master/src/main/java/com/zhengweihao/lock&quot;&gt;几种锁的使用及哲学家问题演示代码&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;参考资料
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.iteye.com/news/28915&quot;&gt;并发不是并行，它更好！&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>OSX常用操作笔记</title>
      <link>place_your_blog_url_here/osx/system/2015/10/28/osx-operates.html</link>
      <pubDate>28 Oct 2015</pubDate>
      <author>place_your_name_here</author>
      <guid>place_your_blog_url_here/osx/system/2015/10/28/osx-operates</guid>
      <description>&lt;h2 id=&quot;osx常用操作笔记&quot;&gt;OSX常用操作笔记&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;环境变量设置：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  环境变量目录（按顺序加载）：
  /etc/profile
  /etc/bashrc
  ~/.bash_profile
    
  设置格式如：
  export PATH=path1:path2:${PATH}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;设置Finder以显示路径：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  defaults write com.apple.finder _FXShowPosixPathInTitle -bool YES
  拷贝路径快捷键：
  Option+Command+C
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Host文件目录：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;/etc/hosts&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;JDK目录：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;/Library/Java/JavaVirtualMachines/&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finder 中显示隐藏文件：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  defaults write com.apple.finder AppleShowAllFiles -boolean true ; killall Finder  //显示
  defaults write com.apple.finder AppleShowAllFiles -boolean false ; killall Finder  //隐藏
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;隐藏美式键盘：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  备份 ~/Library/Preferences/com.apple.HIToolbox.plist
  使用 plist编辑器打开 ~/Library/Preferences/com.apple.HIToolbox.plist
  删除 AppleEnableInputSources 中不需要的节点。
  重启系统
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;​&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
      </div> <!-- end #pjax -->

      <div id="post__toc-trigger">
        <div id="post__toc">
          <span id="post__toc-title">Table of Contents</span>
          <ul id="post__toc-ul"></ul>
        </div>
      </div>
    </div> <!-- end #post -->

    <button id="js-fullscreen"><span id="icon-arrow" class="fontello"></span></button>

    <script src="/assets/js/jquery-2.0.3.min.js"></script>
    <script src="/assets/js/jquery.pjax.js"></script>
    <script src="/assets/js/nprogress.js"></script>
    <script src="/assets/js/script.js"></script>

    <!-- UpYun Advertise
    <div class="adv">
    	<a href="http://www.upyun.com/">
    		<img src="/imgs/upyun_logo.png" />
    	</a>
    </div> -->
  </body>
</html>