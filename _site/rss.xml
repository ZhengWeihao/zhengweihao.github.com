<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0" />
    <link rel="shortcut icon" href="/imgs/fav.ico">
    <!--[if lte IE 9]><meta http-equiv="refresh" content="0;url=/ie.html"><![endif]-->
    <title></title>
    <meta name="description" content="">
    <link rel="stylesheet" type="text/css" href="/assets/css/style.css">
    </style>
  </head>
  <body>
    <aside id="sidebar">
      <nav id="tags">
        <a href="/index.html" id="avatar"></a>

        <ul id="tags__ul">
          <li id="js-label1" class="tags__li tags-btn active">All Posts</li>
          <li id="js-label2" class="tags__li tags-btn">Java相关</li>
          <li id="js-label3" class="tags__li tags-btn">摄影相关</li>
        </ul>

        <div id="tags__bottom">
          <a href="mailto:place_your_email_address_here" id="icon-email" class="tags-btn fontello"></a>
          <a href="/rss.xml" id="icon-feed" class="tags-btn fontello"></a>
        </div>
      </nav> <!-- end #tags -->

      <div id="posts-list">
        <form action="" id="search-form">
          <a href="/index.html" id="mobile-avatar"></a>
          <!-- NOTE: input field is disabled by default -->
          <input id="search-input" type="text" placeholder="Search..." disabled >
        </form>

        <nav id="pl__container">
        
          <a class="java idea pl__all" href="/java/idea/2018/01/23/idea-keymap.html"><span class="pl__circle"></span><span class="pl__title">IDEA常用操作</span><span class="pl__date">Jan 2018</span></a>
        
          <a class="photo style color pl__all" href="/photo/style/color/2018/01/22/photo-styles-colors.html"><span class="pl__circle"></span><span class="pl__title">常见照片风格总结</span><span class="pl__date">Jan 2018</span></a>
        
          <a class="java jvm pl__all" href="/java/jvm/2018/01/22/java-jvm.markdown.html"><span class="pl__circle"></span><span class="pl__title">JVM笔记</span><span class="pl__date">Jan 2018</span></a>
        
          <a class="java pl__all" href="/java/2018/01/22/java-common.html"><span class="pl__circle"></span><span class="pl__title">Java常用操作笔记</span><span class="pl__date">Jan 2018</span></a>
        
          <a class="java concurrent pl__all" href="/java/concurrent/2016/07/12/java-concurrent.html"><span class="pl__circle"></span><span class="pl__title">Java并发编程笔记</span><span class="pl__date">Jul 2016</span></a>
        
          <a class="osx system pl__all" href="/osx/system/2015/10/28/osx-operates.html"><span class="pl__circle"></span><span class="pl__title">OSX常用操作笔记</span><span class="pl__date">Oct 2015</span></a>
        
          <a class="frontend cordova pl__all" href="/frontend/cordova/2015/03/20/css3-snowflake.html"><span class="pl__circle"></span><span class="pl__title">JQuery+CSS3实现雪花飘落效果</span><span class="pl__date">Mar 2015</span></a>
        
          <a class="frontend cordova pl__all" href="/frontend/cordova/2015/03/20/cordova-first.html"><span class="pl__circle"></span><span class="pl__title">Cordova开发笔记</span><span class="pl__date">Mar 2015</span></a>
        
          <a class="backend java spring springMVC pl__all" href="/backend/java/spring/springmvc/2015/02/16/spring-mvc-freemark.html"><span class="pl__circle"></span><span class="pl__title">SpringMVC集成Freemark及JSON格式输出</span><span class="pl__date">Feb 2015</span></a>
        
          <a class="frontend pl__all" href="/frontend/2015/02/16/random-nums-tool.html"><span class="pl__circle"></span><span class="pl__title">JQuery+HTML实现年会摇奖小工具</span><span class="pl__date">Feb 2015</span></a>
        
        </nav>
      </div> <!-- end #posts-list -->
    </aside> <!-- end #sidebar -->

    <div id="post">
      <div id="pjax">
        <?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>place_your_blog_title_here</title>
    <link>place_your_blog_url_here</link>
    <atom:link href="place_your_blog_url_here/rss.xml" rel="self" type="application/rss+xml" />
    <description>place_your_blog_description_here</description>
    <language>place_your_blog_language_here</language>
    <pubDate>Wed, 24 Jan 2018 15:47:23 +0800</pubDate>
    <lastBuildDate>Wed, 24 Jan 2018 15:47:23 +0800</lastBuildDate>

    
    <item>
      <title>IDEA常用操作</title>
      <link>place_your_blog_url_here/java/idea/2018/01/23/idea-keymap.html</link>
      <pubDate>23 Jan 2018</pubDate>
      <author>place_your_name_here</author>
      <guid>place_your_blog_url_here/java/idea/2018/01/23/idea-keymap</guid>
      <description>&lt;h2 id=&quot;idea常用操作&quot;&gt;IDEA常用操作&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;初始设置：
    &lt;ul&gt;
      &lt;li&gt;Maven设置（UserSetting、Automatically Download）&lt;/li&gt;
      &lt;li&gt;JDK设置&lt;/li&gt;
      &lt;li&gt;FileEncoding&lt;/li&gt;
      &lt;li&gt;自动导入包：General-AutoImport&lt;/li&gt;
      &lt;li&gt;打开多个项目方式：Appearance-SystemSetting-Project Opering&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;常用实时模板：
    &lt;ul&gt;
      &lt;li&gt;psvm&lt;/li&gt;
      &lt;li&gt;sout&lt;/li&gt;
      &lt;li&gt;fori&lt;/li&gt;
      &lt;li&gt;ifn&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;调试：
    &lt;ul&gt;
      &lt;li&gt;F7：进入下一步，且进入方法体&lt;/li&gt;
      &lt;li&gt;F8：进入下一步，且不进入方法体&lt;/li&gt;
      &lt;li&gt;F9：恢复运行，且在下个断点暂停&lt;/li&gt;
      &lt;li&gt;alt+F8：输入代码并查看执行结果&lt;/li&gt;
      &lt;li&gt;Condition：右击断点，选择Condition&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;常用快捷键：
    &lt;ul&gt;
      &lt;li&gt;光标操作：
        &lt;ul&gt;
          &lt;li&gt;跳转指定行：ctrl+g（command+g）&lt;/li&gt;
          &lt;li&gt;进入光标所在方法：ctrl+b（command+b）&lt;/li&gt;
          &lt;li&gt;返回历史光标位置：alt+ctrl+←/→（alt+command+←/→）&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;一般操作：
        &lt;ul&gt;
          &lt;li&gt;代码提示：ctrl+space（control+space）&lt;/li&gt;
          &lt;li&gt;导入包：alt+enter（option+enter）&lt;/li&gt;
          &lt;li&gt;查找定位：ctrl+shift+n（command+shift+n） [CLASS_NAME:LINE_NUMBER]&lt;/li&gt;
          &lt;li&gt;代码生成：alt+insert（control+n, control+enter）&lt;/li&gt;
          &lt;li&gt;切换窗口：ctrl+tab（control+tab）&lt;/li&gt;
          &lt;li&gt;最近打开的文件：ctrl+e（command+e）&lt;/li&gt;
          &lt;li&gt;切换全屏模式：shift+ctrl+f12（shift+command+f12）&lt;/li&gt;
          &lt;li&gt;显示LIveTemplate：ctrl+j（command+j）&lt;/li&gt;
          &lt;li&gt;面板：
            &lt;ul&gt;
              &lt;li&gt;导航面板：ctrl+1（command+1）&lt;/li&gt;
              &lt;li&gt;控制台面板：ctrl+4（command+4）&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;查看当前类的所有方法：ctrl+f12(command+f12)&lt;/li&gt;
          &lt;li&gt;错误解决：alt+enter（option+enter）&lt;/li&gt;
          &lt;li&gt;引入变量：ctrl+alt+v（command+option+v）&lt;/li&gt;
          &lt;li&gt;运行代码：alt+shift+f10（option+shift+f10）&lt;/li&gt;
          &lt;li&gt;重命名：shift+f6&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;编辑区：
        &lt;ul&gt;
          &lt;li&gt;删除一行：ctrl+y（command+y）&lt;/li&gt;
          &lt;li&gt;复制一行：ctrl+d（command+d）&lt;/li&gt;
          &lt;li&gt;注释：ctrl+/（command+/）&lt;/li&gt;
          &lt;li&gt;按语法选择：[shift] ctrl+w（command+w）&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;查找：
        &lt;ul&gt;
          &lt;li&gt;类/资源查找：ctrl+n（command+n）&lt;/li&gt;
          &lt;li&gt;全局查找：shift+shift&lt;/li&gt;
          &lt;li&gt;内容查找：ctrl+shift+n（command+shift+n）&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;格式化：
        &lt;ul&gt;
          &lt;li&gt;import：ctrl+alt+o（command+alt+o）&lt;/li&gt;
          &lt;li&gt;代码：ctrl+alt+l（command+alt+l）&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>常见照片风格总结</title>
      <link>place_your_blog_url_here/photo/style/color/2018/01/22/photo-styles-colors.html</link>
      <pubDate>22 Jan 2018</pubDate>
      <author>place_your_name_here</author>
      <guid>place_your_blog_url_here/photo/style/color/2018/01/22/photo-styles-colors</guid>
      <description>&lt;h2 id=&quot;常见照片风格总结&quot;&gt;常见照片风格总结&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;小清新：
    &lt;ul&gt;
      &lt;li&gt;整体调性：亮调、通透&lt;/li&gt;
      &lt;li&gt;高光：&lt;font color=&quot;#4ce6e3&quot;&gt;青色&lt;/font&gt;、&lt;font color=&quot;#50c9e0&quot;&gt;蓝色&lt;/font&gt;&lt;/li&gt;
      &lt;li&gt;阴影：&lt;font color=&quot;#4ce6e3&quot;&gt;青色&lt;/font&gt;、&lt;font color=&quot;#50c9e0&quot;&gt;蓝色&lt;/font&gt;、&lt;font color=&quot;#25a726&quot;&gt;绿色&lt;/font&gt;&lt;/li&gt;
      &lt;li&gt;整体感受：轻快明亮&lt;/li&gt;
      &lt;li&gt;常见元素：蓝天、绿草、微风&lt;/li&gt;
      &lt;li&gt;典型图例：
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;/imgs/photo-styles-colors/小清新.jpg&quot; alt=&quot;小清新&quot; width=&quot;600px&quot; /&gt;&lt;/li&gt;
          &lt;li&gt;&lt;img src=&quot;/imgs/photo-styles-colors/小清新2.jpg&quot; alt=&quot;小清新2&quot; width=&quot;600px&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;复古：
    &lt;ul&gt;
      &lt;li&gt;整体调性：暗调、偏灰、部分低饱和&lt;/li&gt;
      &lt;li&gt;高光：&lt;font color=&quot;#4ce6e3&quot;&gt;青色&lt;/font&gt;、&lt;font color=&quot;#25a726&quot;&gt;绿色&lt;/font&gt;、&lt;font color=&quot;#f9f846&quot;&gt;黄色&lt;/font&gt;&lt;/li&gt;
      &lt;li&gt;阴影：&lt;font color=&quot;#4ce6e3&quot;&gt;青色&lt;/font&gt;、&lt;font color=&quot;#25a726&quot;&gt;绿色&lt;/font&gt;、&lt;font color=&quot;#f9f846&quot;&gt;黄色&lt;/font&gt;&lt;/li&gt;
      &lt;li&gt;整体感受：阴郁&lt;/li&gt;
      &lt;li&gt;常见元素：老墙、老家具、木地板&lt;/li&gt;
      &lt;li&gt;典型图例：
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;/imgs/photo-styles-colors/复古.jpg&quot; alt=&quot;复古&quot; width=&quot;600px&quot; /&gt;&lt;/li&gt;
          &lt;li&gt;&lt;img src=&quot;/imgs/photo-styles-colors/复古2.jpg&quot; alt=&quot;复古2&quot; width=&quot;600px&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;日系：
    &lt;ul&gt;
      &lt;li&gt;整体调性：轻微过曝&lt;/li&gt;
      &lt;li&gt;高光：&lt;font color=&quot;#f9f846&quot;&gt;黄色&lt;/font&gt;&lt;/li&gt;
      &lt;li&gt;阴影：&lt;font color=&quot;#4ce6e3&quot;&gt;青色&lt;/font&gt;、&lt;font color=&quot;#50c9e0&quot;&gt;蓝色&lt;/font&gt;、&lt;font color=&quot;#25a726&quot;&gt;绿色&lt;/font&gt;&lt;/li&gt;
      &lt;li&gt;整体感受：干净、温暖&lt;/li&gt;
      &lt;li&gt;常见元素：夕阳光&lt;/li&gt;
      &lt;li&gt;典型图例：
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;/imgs/photo-styles-colors/日系.jpg&quot; alt=&quot;日系&quot; width=&quot;600px&quot; /&gt;&lt;/li&gt;
          &lt;li&gt;&lt;img src=&quot;/imgs/photo-styles-colors/日系2.jpeg&quot; alt=&quot;日系2&quot; width=&quot;600px&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;港调：
    &lt;ul&gt;
      &lt;li&gt;整体调性：暗调、朦胧&lt;/li&gt;
      &lt;li&gt;高光：&lt;font color=&quot;#846e54&quot;&gt;棕色&lt;/font&gt;、&lt;font color=&quot;#f9f846&quot;&gt;黄色&lt;/font&gt;、&lt;font color=&quot;#da37c9&quot;&gt;洋红色&lt;/font&gt;&lt;/li&gt;
      &lt;li&gt;阴影：&lt;font color=&quot;#846e54&quot;&gt;棕色&lt;/font&gt;、&lt;font color=&quot;#f9f846&quot;&gt;黄色&lt;/font&gt;&lt;/li&gt;
      &lt;li&gt;整体感受：老旧、浓郁&lt;/li&gt;
      &lt;li&gt;常见元素：大波浪、旗袍/纱裙&lt;/li&gt;
      &lt;li&gt;典型图例：
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;/imgs/photo-styles-colors/港调.jpg&quot; alt=&quot;港调&quot; width=&quot;600px&quot; /&gt;&lt;/li&gt;
          &lt;li&gt;&lt;img src=&quot;/imgs/photo-styles-colors/港调2.png&quot; alt=&quot;港调2&quot; width=&quot;600px&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;欧美：
    &lt;ul&gt;
      &lt;li&gt;整体调性：暗调&lt;/li&gt;
      &lt;li&gt;高光：&lt;font color=&quot;#e49e28&quot;&gt;橙色&lt;/font&gt;、&lt;font color=&quot;#f9f846&quot;&gt;黄色&lt;/font&gt;&lt;/li&gt;
      &lt;li&gt;阴影：&lt;font color=&quot;#50c9e0&quot;&gt;蓝色&lt;/font&gt;、&lt;font color=&quot;#4ce6e3&quot;&gt;青色&lt;/font&gt;、&lt;font color=&quot;#25a726&quot;&gt;绿色&lt;/font&gt;&lt;/li&gt;
      &lt;li&gt;整体感受：个性另类&lt;/li&gt;
      &lt;li&gt;常见元素：灰墙、高楼&lt;/li&gt;
      &lt;li&gt;典型图例：
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;/imgs/photo-styles-colors/欧美.jpg&quot; alt=&quot;欧美&quot; width=&quot;600px&quot; /&gt;&lt;/li&gt;
          &lt;li&gt;&lt;img src=&quot;/imgs/photo-styles-colors/欧美2.jpg&quot; alt=&quot;欧美2&quot; width=&quot;600px&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;测试说明：
    &lt;ul&gt;
      &lt;li&gt;测试目的在于调整色彩以验证以上观点，须主观上排除照片本身题材的干扰&lt;/li&gt;
      &lt;li&gt;测试原图：
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;/imgs/photo-styles-colors/example.png&quot; alt=&quot;example_小清新&quot; width=&quot;600px&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;小清新：
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;/imgs/photo-styles-colors/example_小清新.png&quot; alt=&quot;example_小清新&quot; width=&quot;600px&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;复古：
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;/imgs/photo-styles-colors/example_复古.png&quot; alt=&quot;example_小清新&quot; width=&quot;600px&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;日系：
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;/imgs/photo-styles-colors/example_日系.png&quot; alt=&quot;example_小清新&quot; width=&quot;600px&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;港调：
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;/imgs/photo-styles-colors/example_港调.png&quot; alt=&quot;example_小清新&quot; width=&quot;600px&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;欧美：
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;/imgs/photo-styles-colors/example_欧美.png&quot; alt=&quot;example_小清新&quot; width=&quot;600px&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;色彩感受：
    &lt;ul&gt;
      &lt;li&gt;活力、热情：&lt;font color=&quot;#f94646&quot;&gt;红色&lt;/font&gt;、&lt;font color=&quot;#e49e28&quot;&gt;橙色&lt;/font&gt;、&lt;font color=&quot;#f9f846&quot;&gt;黄色&lt;/font&gt;（高饱和、高明度）&lt;/li&gt;
      &lt;li&gt;静谧、轻盈：&lt;font color=&quot;#50c9e0&quot;&gt;蓝色&lt;/font&gt;（低饱和、高明度），多应用于小清新风格&lt;/li&gt;
      &lt;li&gt;怀旧、忧伤：&lt;font color=&quot;#846e54&quot;&gt;棕色&lt;/font&gt;（高饱和、低明度），多应用于复古风格&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;小技巧：
    &lt;ul&gt;
      &lt;li&gt;利用&lt;strong&gt;对比色&lt;/strong&gt;区分元素，凸显画面立体感或营造趣味感&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;统一&lt;/strong&gt;画面色调，排除画面中多余的干扰物&lt;/li&gt;
      &lt;li&gt;对于细节多、颜色杂的照片，可以尝试调整为&lt;strong&gt;黑白色&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;注：&lt;/p&gt;

&lt;p&gt;　　各种风格的取色带有个人主观印象，不具备普适性，仅供参考。&lt;/p&gt;

&lt;p&gt;　　参考图片均来自网络，侵删。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JVM笔记</title>
      <link>place_your_blog_url_here/java/jvm/2018/01/22/java-jvm.markdown.html</link>
      <pubDate>22 Jan 2018</pubDate>
      <author>place_your_name_here</author>
      <guid>place_your_blog_url_here/java/jvm/2018/01/22/java-jvm.markdown</guid>
      <description>&lt;h2 id=&quot;jvm笔记&quot;&gt;JVM笔记&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;抽象结构：
    &lt;ul&gt;
      &lt;li&gt;实例域、静态域、数据 -&amp;gt; 堆内存（线程之间共享）&lt;/li&gt;
      &lt;li&gt;局部变量、方法定义的参数 -&amp;gt; 虚拟机栈&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    
    <item>
      <title>Java常用操作笔记</title>
      <link>place_your_blog_url_here/java/2018/01/22/java-common.html</link>
      <pubDate>22 Jan 2018</pubDate>
      <author>place_your_name_here</author>
      <guid>place_your_blog_url_here/java/2018/01/22/java-common</guid>
      <description>&lt;h2 id=&quot;java常用操作笔记&quot;&gt;Java常用操作笔记&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;查看字节码：
    &lt;ul&gt;
      &lt;li&gt;javap -v CLASS_FILE_NAME&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    
    <item>
      <title>Java并发编程笔记</title>
      <link>place_your_blog_url_here/java/concurrent/2016/07/12/java-concurrent.html</link>
      <pubDate>12 Jul 2016</pubDate>
      <author>place_your_name_here</author>
      <guid>place_your_blog_url_here/java/concurrent/2016/07/12/java-concurrent</guid>
      <description>&lt;h2 id=&quot;java并发编程笔记&quot;&gt;Java并发编程笔记&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;基本概念：
    &lt;ul&gt;
      &lt;li&gt;进程：程序&lt;/li&gt;
      &lt;li&gt;线程：进程中负责执行程序的执行单元&lt;/li&gt;
      &lt;li&gt;并发：以可独立执行的进程集合的方式编程&lt;/li&gt;
      &lt;li&gt;并行：以可同时执行的计算指令方式编程&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;背景：
    &lt;ul&gt;
      &lt;li&gt;串行服务的低响应速度及高CPU空闲率&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;多线程实现原理：
    &lt;ul&gt;
      &lt;li&gt;时间片调度&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;优点：
    &lt;ul&gt;
      &lt;li&gt;提高资源利用率&lt;/li&gt;
      &lt;li&gt;提高程序性能&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;风险：
    &lt;ul&gt;
      &lt;li&gt;死锁&lt;/li&gt;
      &lt;li&gt;上下文切换&lt;/li&gt;
      &lt;li&gt;线程安全&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;实现方式：
    &lt;ul&gt;
      &lt;li&gt;继承Thread类：单继承&lt;/li&gt;
      &lt;li&gt;实现Runnable接口：多实现&lt;/li&gt;
      &lt;li&gt;ExecutorService&lt;/li&gt;
      &lt;li&gt;Callable接口、Future类实现带返回值的多线程操作&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;生命周期：
    &lt;ul&gt;
      &lt;li&gt;创建：new Thread()&lt;/li&gt;
      &lt;li&gt;就绪：start()&lt;/li&gt;
      &lt;li&gt;运行：CPU调度，根据时间片轮询或yield方法切换就绪态&lt;/li&gt;
      &lt;li&gt;阻塞：sleep()/join()&lt;/li&gt;
      &lt;li&gt;终止：run结束或者Main结束&lt;/li&gt;
      &lt;li&gt;锁定：synchronized&lt;/li&gt;
      &lt;li&gt;等待：wait/notify&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;关键问题：
    &lt;ul&gt;
      &lt;li&gt;线程之间通信（线程之间交换信息）
        &lt;ul&gt;
          &lt;li&gt;共享内存&lt;/li&gt;
          &lt;li&gt;消息传递：wait/notify/notifyAll&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;线程同步（控制不同线程操作发生的相对顺序）
        &lt;ul&gt;
          &lt;li&gt;共享内存的并发模型中，同步是显式进行，如：synchronized&lt;/li&gt;
          &lt;li&gt;消息传递的并发模型中，消息发送必须在消息接收之前，所以同步是隐式的：
            &lt;ul&gt;
              &lt;li&gt;可见性问题：工作内存、主内存&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;控制线程执行的顺序：
        &lt;ul&gt;
          &lt;li&gt;join：让主线程等待子线程结束后才能继续运行&lt;/li&gt;
          &lt;li&gt;ExecutorService executor = Excutors.newSingleThreadExecutor();// 只有一个线程的线程池，操作不限数量的线程队列（FIFO队列 -&amp;gt; 排队处理）&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;线程池：
    &lt;ul&gt;
      &lt;li&gt;背景：
        &lt;ul&gt;
          &lt;li&gt;频繁使用线程的场景中，线程创建、销毁开销大，甚至会造成OOM&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;​&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;volatile关键字
    &lt;ul&gt;
      &lt;li&gt;支持：可见性&lt;/li&gt;
      &lt;li&gt;不支持：复合操作的原子性&lt;/li&gt;
      &lt;li&gt;实现原理：
        &lt;ul&gt;
          &lt;li&gt;对volatile变量进行写操作时，JVM向处理器发送一条Lock前缀指令。会把缓存行的数据写会系统内存&lt;/li&gt;
          &lt;li&gt;在多处理器的情况下，保证各处理器缓存一致性，实现缓存一致性协议（设置失效与更新）&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;优化：拒绝指令重排&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;synchronized关键字：锁机制，隐式释放
    &lt;ul&gt;
      &lt;li&gt;支持：重入性、互斥性、可见性&lt;/li&gt;
      &lt;li&gt;不支持：超时等待、可中断性、公平性&lt;/li&gt;
      &lt;li&gt;实现原理：
        &lt;ul&gt;
          &lt;li&gt;monitorenter、monitorexit字节码指令&lt;/li&gt;
          &lt;li&gt;SynchronizedQueue（存储无法获取锁的线程）&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;释放时机：
        &lt;ul&gt;
          &lt;li&gt;代码块执行完成&lt;/li&gt;
          &lt;li&gt;线程执行出现异常&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Lock接口：显式获取、释放锁，更适合竞争激烈场景（Java5推出的juc包中）
    &lt;ul&gt;
      &lt;li&gt;重入锁&lt;/li&gt;
      &lt;li&gt;读写锁&lt;/li&gt;
      &lt;li&gt;可中断锁&lt;/li&gt;
      &lt;li&gt;公平锁&lt;/li&gt;
      &lt;li&gt;可重入读写锁&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;分布式锁：
    &lt;ul&gt;
      &lt;li&gt;场景：
        &lt;ul&gt;
          &lt;li&gt;多项服务访问同个资源&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;实现方式：
        &lt;ul&gt;
          &lt;li&gt;数据库：
            &lt;ul&gt;
              &lt;li&gt;原理：
                &lt;ul&gt;
                  &lt;li&gt;lock表.method_name字段，增加唯一性约束，实现获取锁功能&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;缺点：
                &lt;ul&gt;
                  &lt;li&gt;记录删除失败&lt;/li&gt;
                  &lt;li&gt;不支持重入性&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;ZooKeeper：
            &lt;ul&gt;
              &lt;li&gt;原理：
                &lt;ul&gt;
                  &lt;li&gt;/Locks目录中写入methodName临时有序节点，当前最小节点获得锁&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;优点：
                &lt;ul&gt;
                  &lt;li&gt;Watch机制自动删除失效节点&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Redis：
            &lt;ul&gt;
              &lt;li&gt;原理：
                &lt;ul&gt;
                  &lt;li&gt;setnx命令：在key不存在时设置值，并返回0或1&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;死锁：
    &lt;ul&gt;
      &lt;li&gt;原因：
        &lt;ul&gt;
          &lt;li&gt;多把锁（哲学家问题）&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;解决方式：
        &lt;ul&gt;
          &lt;li&gt;全局顺序&lt;/li&gt;
          &lt;li&gt;超时时间（不能避免死锁）&lt;/li&gt;
          &lt;li&gt;可中断锁（不能避免死锁）&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;无锁化：
    &lt;ul&gt;
      &lt;li&gt;优点：
        &lt;ul&gt;
          &lt;li&gt;减少上下文切换&lt;/li&gt;
          &lt;li&gt;无须手动获取、释放锁&lt;/li&gt;
          &lt;li&gt;通用、高效、成熟&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;方法：
        &lt;ul&gt;
          &lt;li&gt;Hash取模分段处理&lt;/li&gt;
          &lt;li&gt;Atomic类&lt;/li&gt;
          &lt;li&gt;ReidsAtomic类（适用分布式环境）&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;代码实践：
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/ZhengWeihao/JavaDemo/tree/master/src/main/java/com/zhengweihao/lock&quot;&gt;几种锁的使用及哲学家问题演示代码&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;参考资料
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.iteye.com/news/28915&quot;&gt;并发不是并行，它更好！&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>OSX常用操作笔记</title>
      <link>place_your_blog_url_here/osx/system/2015/10/28/osx-operates.html</link>
      <pubDate>28 Oct 2015</pubDate>
      <author>place_your_name_here</author>
      <guid>place_your_blog_url_here/osx/system/2015/10/28/osx-operates</guid>
      <description>&lt;h2 id=&quot;osx常用操作笔记&quot;&gt;OSX常用操作笔记&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;环境变量设置：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  环境变量目录（按顺序加载）：
  /etc/profile
  /etc/bashrc
  ~/.bash_profile
    
  设置格式如：
  export PATH=path1:path2:${PATH}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;设置Finder以显示路径：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  defaults write com.apple.finder _FXShowPosixPathInTitle -bool YES
  拷贝路径快捷键：
  Option+Command+C
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Host文件目录：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;/etc/hosts&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;JDK目录：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;/Library/Java/JavaVirtualMachines/&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finder 中显示隐藏文件：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  defaults write com.apple.finder AppleShowAllFiles -boolean true ; killall Finder  //显示
  defaults write com.apple.finder AppleShowAllFiles -boolean false ; killall Finder  //隐藏
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;隐藏美式键盘：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  备份 ~/Library/Preferences/com.apple.HIToolbox.plist
  使用 plist编辑器打开 ~/Library/Preferences/com.apple.HIToolbox.plist
  删除 AppleEnableInputSources 中不需要的节点。
  重启系统
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;​&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>JQuery+CSS3实现雪花飘落效果</title>
      <link>place_your_blog_url_here/frontend/cordova/2015/03/20/css3-snowflake.html</link>
      <pubDate>20 Mar 2015</pubDate>
      <author>place_your_name_here</author>
      <guid>place_your_blog_url_here/frontend/cordova/2015/03/20/css3-snowflake</guid>
      <description>&lt;h2 id=&quot;jquerycss3实现雪花飘落效果&quot;&gt;JQuery+CSS3实现雪花飘落效果&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;看到淘宝APP上出现了雪花飘落的效果，脑袋一动觉得CSS3似乎也很好实现，就动手做了这么个demo。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;预期效果：
产生漫天雪花，从天空飘落到地面，停留稍瞬后消融。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;实现思路：
第一步是产生雪花，即产生div，并利用随机数，随机一定区间的数字作为div的宽高、透明度，并设置border-radius属性为宽高值，即可得到一片大小、透明度随机的雪花。之后将雪花位置设置在屏幕顶端，横向位置随机，即完成雪花的初始化。示例代码如下：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;// 产生雪花dom
function snowflake(size, alpha, top, left) {
	var s = document.createElement('div');
	$(s).css({
		'width': size,
		'height': size,
		'border-radius': size,
		'background-color': 'rgba(255,255,255,' + alpha + ')',
		'top': -50,
		'left': left,
	}).addClass('snowflake');
	return s;
}
  	
// 获取一片随机大小、透明度的雪花示例
var size = Math.random() * flakeSize + 2;
var alpha = Math.random() * 0.7 + 0.1;
var left = Math.random() * $(window).width();
var s = snowflake(size, alpha, 0, left);
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;产生雪花后，设置css3的transition属性，并将div移动到屏幕底部，即可开启动画效果。同时，雪花飘落后，停顿若干时长再将dom删除，即可达到雪花消融效果。示例代码如下：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;.snowflake {
	background-color: rgba(255, 255, 255, 0.5);
	display: inline-block;
	transition: top 2s;// 此处认为动画时间为2秒较为合适,实际情况中可自行调整
	transition-timing-function: cubic-bezier(0.25,0.1,0.25,1);// 设置动画的贝塞尔值,使得动画不显得生硬,具体值同样也可按个人喜好调整
}
  	
// 利用setTimeout方法,延时消除雪花,melt的值即为雪花飘落后留存的时长
setTimeout(function() {
	$s.remove();
}, 2000 + melt);
  	
完成一片雪花的动画效果后，只要快速不停地循环这个，即能产生雪花不停飘落的效果了。示例代码如下：
  	
var it = setInterval(function() {
	// 初始化雪花
	var id = 's_' + (++animateId);
	var size = Math.random() * flakeSize + 2;
	var alpha = Math.random() * 0.7 + 0.1;
	var left = Math.random() * $(window).width();
	var s = snowflake(size, alpha, 0, left);
	var $s = $(s).attr('id', id);
	$sky.get(0).appendChild(s);
  	
	// 雪花飘落并消融,延迟执行以确保dom已经生成好
	setTimeout(function() {
		$s.css('top', maxTop + (flakeSize - $s.width()) / 2);
  	
		setTimeout(function() {
			$s.remove();
		}, 2000 + melt);
	}, 100);
}, rate);
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;结果展示：
进入页面随机开始频率为60ms，融化时长2s的动画，页面向下拖动可设置参数，&lt;a href=&quot;/example/snowflake/index.html&quot;&gt;点我查看页面&lt;/a&gt;。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Cordova开发笔记</title>
      <link>place_your_blog_url_here/frontend/cordova/2015/03/20/cordova-first.html</link>
      <pubDate>20 Mar 2015</pubDate>
      <author>place_your_name_here</author>
      <guid>place_your_blog_url_here/frontend/cordova/2015/03/20/cordova-first</guid>
      <description>&lt;h2 id=&quot;cordova开发笔记&quot;&gt;Cordova开发笔记&lt;/h2&gt;
&lt;h3 id=&quot;cordova基本开发环境&quot;&gt;Cordova基本开发环境&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;安装&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;　　Cordova的安装可以选择&lt;code&gt;下载安装&lt;/code&gt;及&lt;code&gt;使用node安装工具&lt;/code&gt;两种方式，而我采用了node安装的方式，所以需要先安装&lt;a href=&quot;https://nodejs.org&quot; title=&quot;nodejs&quot;&gt;nodejs&lt;/a&gt;，之后使用npm命令安装：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	// MACOS
	$ sudo npm install -g cordova
	// windows
	C:\&amp;gt;npm install -g cordova
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　　命令安装完之后，在node目录下就会产生cordova的文件夹了，再将它配置到环境变量中之后就支持cordova命令了。&lt;/p&gt;

&lt;p&gt;　　但是还没结束，因为Cordova编译是通过ant来进行的，所以还需要安装ant，下载&lt;a href=&quot;http://ant.apache.org&quot; title=&quot;ant&quot;&gt;ant&lt;/a&gt;并配置环境变量即可。&lt;/p&gt;

&lt;p&gt;　　而如果还需要开发Android应用，则还需要下载安装&lt;a href=&quot;http://developer.android.com/tools/help/adt.html&quot; title=&quot;Android Development Tools&quot;&gt;安卓开发工具&lt;/a&gt;，打开SDK Manager下载Cordova需要的SDK版本（当前使用21版本），并配置ANDROID_HOME环境变量即可。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;hello world&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  // 创建项目
  cordova create {project name} [{project package} {app name}]
  // 添加环境
  cordova platform add [android|ios|...]
  // 添加插件
  cordova plugin add {plugin package}
  // 运行环境
  cordova run [android|ios|...]
  // 打包项目（需要先将证书文件拷到ant-build目录）
  cordova build -release
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>SpringMVC集成Freemark及JSON格式输出</title>
      <link>place_your_blog_url_here/backend/java/spring/springmvc/2015/02/16/spring-mvc-freemark.html</link>
      <pubDate>16 Feb 2015</pubDate>
      <author>place_your_name_here</author>
      <guid>place_your_blog_url_here/backend/java/spring/springmvc/2015/02/16/spring-mvc-freemark</guid>
      <description>&lt;h2 id=&quot;springmvc集成freemark及json格式输出&quot;&gt;SpringMVC集成Freemark及JSON格式输出&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;最近做项目需要使用SpringMVC代替Struts2，因此进行了对SpringMVC的一些初步学习，而在以前的项目中，也是对Freemark比较熟悉，所以也做了整合Freemark的一些工作，在这里做个记录。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;第一部分springmvc基本配置&quot;&gt;第一部分：SpringMVC基本配置&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Jar包：&lt;/p&gt;

    &lt;p&gt;项目为Maven工程，所以使用pom文件管理jar包，具体依赖如下：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  &amp;lt;!--spring 依赖 --&amp;gt;
  &amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-beans&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;3.1.0.RELEASE&amp;lt;/version&amp;gt;
  &amp;lt;/dependency&amp;gt;
  &amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-context&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;3.1.0.RELEASE&amp;lt;/version&amp;gt;
  &amp;lt;/dependency&amp;gt;
  &amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-context-support&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;3.1.0.RELEASE&amp;lt;/version&amp;gt;
  &amp;lt;/dependency&amp;gt;
  &amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-core&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;3.1.0.RELEASE&amp;lt;/version&amp;gt;
  &amp;lt;/dependency&amp;gt;
  &amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-aop&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;
  &amp;lt;/dependency&amp;gt;
  &amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-web&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;3.1.0.RELEASE&amp;lt;/version&amp;gt;
  &amp;lt;/dependency&amp;gt;
  &amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-webmvc&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;
  &amp;lt;/dependency&amp;gt;
  &amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-tx&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;
  &amp;lt;/dependency&amp;gt;
  &amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-orm&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;
  &amp;lt;/dependency&amp;gt;
  &amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-jdbc&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;
  &amp;lt;/dependency&amp;gt;

  &amp;lt;!-- Freemarker --&amp;gt;
  &amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.freemarker&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;freemarker&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2.3.20&amp;lt;/version&amp;gt;
  &amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Spring支持与SpringMVC基本配置：&lt;/p&gt;

    &lt;p&gt;１、Spring基本配置，在Web.xml中添加相应地监听器，并指定配置文件（记得建立配置文件，否则会报FileNotFound异常），如下：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  &amp;lt;!-- Spring 上下文配置文件 --&amp;gt;
  &amp;lt;context-param&amp;gt;
    &amp;lt;param-name&amp;gt;contextConfigLocation&amp;lt;/param-name&amp;gt;
    &amp;lt;param-value&amp;gt;classpath:applicationContext.xml&amp;lt;/param-value&amp;gt;
  &amp;lt;/context-param&amp;gt;

  &amp;lt;!-- Spring 刷新Introspector防止内存泄露 --&amp;gt;
  &amp;lt;listener&amp;gt;
    &amp;lt;listener-class&amp;gt;
      org.springframework.web.util.IntrospectorCleanupListener
    &amp;lt;/listener-class&amp;gt;
  &amp;lt;/listener&amp;gt;

  &amp;lt;!-- Spring 使用ContextLoaderListener加载ApplicationContext配置信息 --&amp;gt;
  &amp;lt;listener&amp;gt;
    &amp;lt;listener-class&amp;gt;org.springframework.web.context.ContextLoaderListener&amp;lt;/listener-class&amp;gt;
  &amp;lt;/listener&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;２、SpringMVC配置(Web.xml中配置，并建立spring-mvc.xml配置文件）。
  在web.xml中添加DispatcherServlet的设定，并设置url-pattern为要捕获的路径规则（也可设置成类似*.action的格式），如下：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  &amp;lt;!-- Spring MVC --&amp;gt;
  &amp;lt;servlet&amp;gt;
    &amp;lt;servlet-name&amp;gt;springDispatcherServlet&amp;lt;/servlet-name&amp;gt;
    &amp;lt;servlet-class&amp;gt;org.springframework.web.servlet.DispatcherServlet&amp;lt;/servlet-class&amp;gt;
    &amp;lt;init-param&amp;gt;
      &amp;lt;param-name&amp;gt;contextConfigLocation&amp;lt;/param-name&amp;gt;
      &amp;lt;param-value&amp;gt;classpath:spring-mvc.xml&amp;lt;/param-value&amp;gt;
    &amp;lt;/init-param&amp;gt;
    &amp;lt;load-on-startup&amp;gt;1&amp;lt;/load-on-startup&amp;gt;
  &amp;lt;/servlet&amp;gt;
  &amp;lt;servlet-mapping&amp;gt;
    &amp;lt;servlet-name&amp;gt;springDispatcherServlet&amp;lt;/servlet-name&amp;gt;
    &amp;lt;url-pattern&amp;gt;/&amp;lt;/url-pattern&amp;gt;
  &amp;lt;/servlet-mapping&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;在spring-mvc.xml中配置页面返回规则，并指定Spring自动扫描的路径，如下：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  &amp;lt;!-- Spring MVC UrlMapping --&amp;gt;
      &amp;lt;!-- Spring MVC UrlMapping --&amp;gt;
  &amp;lt;bean id=&quot;urlMapping&quot;
    class=&quot;org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping&quot; /&amp;gt;
  &amp;lt;bean
    class=&quot;org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter&quot;&amp;gt;
    &amp;lt;property name=&quot;messageConverters&quot;&amp;gt;
      &amp;lt;list&amp;gt;
        &amp;lt;bean id=&quot;mappingStringHttpMessageConverter&quot; class=&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;&amp;gt;
          &amp;lt;property name=&quot;supportedMediaTypes&quot;&amp;gt;
            &amp;lt;list&amp;gt;
              &amp;lt;bean class=&quot;org.springframework.http.MediaType&quot;&amp;gt;
                &amp;lt;constructor-arg index=&quot;0&quot; value=&quot;text&quot; /&amp;gt;
                &amp;lt;constructor-arg index=&quot;1&quot; value=&quot;plain&quot; /&amp;gt;
                &amp;lt;constructor-arg index=&quot;2&quot; value=&quot;UTF-8&quot; /&amp;gt;
              &amp;lt;/bean&amp;gt;
            &amp;lt;/list&amp;gt;
            &amp;lt;!-- &amp;lt;list&amp;gt;  
                      &amp;lt;value&amp;gt;text/plain;charset=UTF-8&amp;lt;/value&amp;gt;  
                      &amp;lt;value&amp;gt;text/html;charset=UTF-8&amp;lt;/value&amp;gt;  
                  &amp;lt;/list&amp;gt; --&amp;gt;
          &amp;lt;/property&amp;gt;
        &amp;lt;/bean&amp;gt;
      &amp;lt;/list&amp;gt;
    &amp;lt;/property&amp;gt;
  &amp;lt;/bean&amp;gt;
    
  &amp;lt;!-- 自动扫描转化 标有@Controller注解的类为bean --&amp;gt;
  &amp;lt;context:component-scan base-package=&quot;com.test&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;３、编写控制器，以供测试，控制器代码如下：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  @Controller
  public class TestController {
  
    @RequestMapping(&quot;/test_index&quot;)
    public ModelAndView index(HttpServletRequest req) {
      ModelAndView mav = new ModelAndView(&quot;index&quot;);
      mav.addObject(&quot;pix&quot;, pix);
      return mav;
    }
  }
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;第二部分springmvc集成freemark输出模板页面&quot;&gt;第二部分：SpringMVC集成Freemark输出模板页面&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;添加Freemark的pom依赖，如下：
  ​&lt;br /&gt;
    &lt;!-- Freemarker --&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.freemarker&lt;/groupId&gt;
      &lt;artifactId&gt;freemarker&lt;/artifactId&gt;
      &lt;version&gt;2.3.20&lt;/version&gt;
    &lt;/dependency&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在spring-mvc.xml中设置使用Freemark为视图解析器，如下：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;&amp;lt;!-- FreeMarker基础支持 --&amp;gt;  
&amp;lt;bean id=&quot;freemarkerConfigurer&quot; class=&quot;org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer&quot;&amp;gt;  
    &amp;lt;property name=&quot;templateLoaderPath&quot; value=&quot;/view/&quot; /&amp;gt;
    &amp;lt;property name=&quot;defaultEncoding&quot; value=&quot;UTF-8&quot; /&amp;gt;
    &amp;lt;property name=&quot;freemarkerSettings&quot;&amp;gt;
        &amp;lt;props&amp;gt;
            &amp;lt;prop key=&quot;template_update_delay&quot;&amp;gt;10&amp;lt;/prop&amp;gt;
            &amp;lt;prop key=&quot;locale&quot;&amp;gt;zh_CN&amp;lt;/prop&amp;gt;
            &amp;lt;prop key=&quot;datetime_format&quot;&amp;gt;yyyy-MM-dd HH:mm:ss&amp;lt;/prop&amp;gt;
            &amp;lt;prop key=&quot;date_format&quot;&amp;gt;yyyy-MM-dd&amp;lt;/prop&amp;gt;
            &amp;lt;prop key=&quot;number_format&quot;&amp;gt;#.##&amp;lt;/prop&amp;gt;
        &amp;lt;/props&amp;gt;
    &amp;lt;/property&amp;gt;
&amp;lt;/bean&amp;gt;
&amp;lt;!-- FreeMarker视图解析 --&amp;gt;
&amp;lt;bean id=&quot;viewResolver&quot; class=&quot;org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver&quot;&amp;gt;  
    &amp;lt;property name=&quot;viewClass&quot; value=&quot;org.springframework.web.servlet.view.freemarker.FreeMarkerView&quot; /&amp;gt;
    &amp;lt;property name=&quot;suffix&quot; value=&quot;.ftl&quot; /&amp;gt;
    &amp;lt;property name=&quot;contentType&quot; value=&quot;text/html;charset=UTF-8&quot; /&amp;gt;
    &amp;lt;property name=&quot;exposeRequestAttributes&quot; value=&quot;true&quot; /&amp;gt;
    &amp;lt;property name=&quot;exposeSessionAttributes&quot; value=&quot;true&quot; /&amp;gt;
    &amp;lt;property name=&quot;exposeSpringMacroHelpers&quot; value=&quot;true&quot; /&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;控制器中进行测试&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;@RequestMapping(&quot;/test_ftl&quot;)
public ModelAndView index(HttpServletRequest req) {
  String pix = req.getParameter(&quot;pix&quot;);

  ModelAndView mav = new ModelAndView(&quot;index&quot;);
  mav.addObject(&quot;pix&quot;, pix);
  return mav;
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;第三部分配置springmvc输出json格式的数据&quot;&gt;第三部分：配置SpringMVC输出JSON格式的数据&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;在pom文件中添加对Jackson的依赖，如下：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;&amp;lt;!-- JSON for Spring MVC --&amp;gt;
&amp;lt;dependency&amp;gt;
&amp;lt;groupId&amp;gt;org.codehaus.jackson&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;jackson-core-asl&amp;lt;/artifactId&amp;gt;
&amp;lt;version&amp;gt;1.8.0&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
&amp;lt;groupId&amp;gt;org.codehaus.jackson&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;jackson-mapper-asl&amp;lt;/artifactId&amp;gt;
&amp;lt;version&amp;gt;1.9.7&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
&amp;lt;groupId&amp;gt;org.codehaus.jackson&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;jackson-jaxrs&amp;lt;/artifactId&amp;gt;
&amp;lt;version&amp;gt;1.8.0&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
&amp;lt;groupId&amp;gt;org.codehaus.jackson&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;jackson-xc&amp;lt;/artifactId&amp;gt;
&amp;lt;version&amp;gt;1.8.0&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在spring-mvc.xml中配置JSON格式的支持，如下：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;&amp;lt;!-- Spring MVC JSON输出格式 --&amp;gt;
&amp;lt;bean id=&quot;mappingJacksonHttpMessageConverter&quot; class=&quot;org.springframework.http.converter.json.MappingJacksonHttpMessageConverter&quot;&amp;gt;
  &amp;lt;property name=&quot;supportedMediaTypes&quot;&amp;gt;
    &amp;lt;list&amp;gt;
      &amp;lt;value&amp;gt;application/json;charset=UTF-8&amp;lt;/value&amp;gt;
      &amp;lt;value&amp;gt;text/html;charset=UTF-8&amp;lt;/value&amp;gt;
    &amp;lt;/list&amp;gt;
  &amp;lt;/property&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;并将Jackson的实体引入到AnnotationMethodHandlerAdapter类的messageConverters属性当中，如下：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;&amp;lt;bean class=&quot;org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter&quot;&amp;gt;
  &amp;lt;property name=&quot;messageConverters&quot;&amp;gt;
    &amp;lt;list&amp;gt;
      &amp;lt;!-- JSON文本输出格式 --&amp;gt;
      &amp;lt;ref bean=&quot;mappingJacksonHttpMessageConverter&quot; /&amp;gt;
      &amp;lt;!-- 简单文本输出格式 --&amp;gt;
      &amp;lt;ref bean=&quot;mappingStringHttpMessageConverter&quot; /&amp;gt;
    &amp;lt;/list&amp;gt;
  &amp;lt;/property&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在控制器中编写JSON格式测试方法，如下：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;@RequestMapping(&quot;/test_json&quot;)
@ResponseBody
public JSONObject testJson(Long id, String name) {
  JSONObject obj = new JSONObject();
  obj.put(&quot;id&quot;, id);
  obj.put(&quot;name&quot;, name);
  return obj;
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    
    <item>
      <title>JQuery+HTML实现年会摇奖小工具</title>
      <link>place_your_blog_url_here/frontend/2015/02/16/random-nums-tool.html</link>
      <pubDate>16 Feb 2015</pubDate>
      <author>place_your_name_here</author>
      <guid>place_your_blog_url_here/frontend/2015/02/16/random-nums-tool</guid>
      <description>&lt;h2 id=&quot;jqueryhtml实现年会摇奖小工具&quot;&gt;JQuery+HTML实现年会摇奖小工具&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;背景：&lt;/p&gt;

    &lt;p&gt;　　因公司年会抽奖需要而编写网页版的此工具。使用流程为：由工作人员为员工们发配个人编号（连续数字），然后在工具中设置抽奖编号区间，之后点击“摇奖”按钮进行摇号，点击“停止”按钮后，确认一个区间内数字，即为中奖号，而该号对应编号的同事即为中奖人了。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;实现思路：&lt;/p&gt;

    &lt;p&gt;　　首先定义两个数组：一为&lt;code&gt;号码数组&lt;/code&gt;，将摇号的所有数字打乱次序后，放入其中；另外一个则是&lt;code&gt;中奖数组&lt;/code&gt;，将中奖号码从号码数组中删去，存入到中奖数组中。&lt;/p&gt;

    &lt;p&gt;　　定义好数组变量后，还需要一个&lt;code&gt;标志变量&lt;/code&gt;，作为摇奖进行中与停止的标志。编写一个主函数，定时地进行执行，根据旗帜变量进行相应的操作：在摇奖过程中时，将号码数组的所有数字依依快速地显示到显示框中；在停止后，选定当时显示的数字作为中奖数字，并停止定时执行。实现如下:    　　&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  //主函数
  var range = [];//号码数组
  var prize = [];//中奖数组
  var inGame = false;//旗帜变量
  var exe_i = 0;//当前执行到的下标
  function main() {
      if(inGame) {//继续执行
          //操作数组下标
          exe_i++;
          if(exe_i &amp;gt;= range.length) exe_i = 0;
    
          //显示数组内容
          $stage.html(range[exe_i]);
    
          //数组长度不够时自动结束
          if(range.length &amp;lt;= 1) inGame = false;
      } else {//结束游戏
          var cur = range[exe_i];//当前号码
    
          //更新数组数据
          prize.push(cur);
          range.splice(exe_i, 1);
    
          //显示结果
          console.log('下标:' + exe_i + ';数字:' + cur);
          alert('摇中号码：' + cur);
          msg();
    
          //停止定时任务
          window.clearInterval(mainInterval);
      }
  }
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;　　有了主函数，工具已经完成了一大半，现在还需要一个触发的函数作为开始与停止操作的触发者。点击“开始”按钮时修改状态位为开始状态并开始定时执行主函数，而点击“停止”按钮时修改旗帜变量状态位为停止状态，主函数会根据状态为进入到停止操作。实现如下：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  //触发函数
  var mainInterval;//定时执行任务标识，通过它可以取消定时执行
  function play() {
      if(inGame) {//执行时触发 -&amp;gt; 停止
          inGame = false;
      } else {//非执行状态触发 -&amp;gt; 开始
          //检查执行环境
          if(range.length &amp;lt;= 0) {
              alert('没号了，加几个进来呗');
              return;
          }
            
          //开始执行
          inGame = true;
          mainInterval = self.setInterval('main()', 50);
      }
  }
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;　　至此核心部分已经基本完成，当然还缺少一些细节的控制，比如：需要提供输入框进行交互；需要根据输入区间产生乱序的号码数组等，这里就不再赘述了，当然，最后还需要对界面美化一下~&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;结果展示：&lt;/p&gt;

    &lt;p&gt;这里再提供一下最终完成的作品（背景图是人事MM找来的，原来丑得惨不忍睹。。。），&lt;a href=&quot;/example/random-nums/index.html&quot;&gt;点我查看&lt;/a&gt;，详细代码就请点&lt;code&gt;审查元素&lt;/code&gt;咯 ^_^&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
      </div> <!-- end #pjax -->

      <div id="post__toc-trigger">
        <div id="post__toc">
          <span id="post__toc-title">Table of Contents</span>
          <ul id="post__toc-ul"></ul>
        </div>
      </div>
    </div> <!-- end #post -->

    <button id="js-fullscreen"><span id="icon-arrow" class="fontello"></span></button>

    <script src="/assets/js/jquery-2.0.3.min.js"></script>
    <script src="/assets/js/jquery.pjax.js"></script>
    <script src="/assets/js/nprogress.js"></script>
    <script src="/assets/js/script.js"></script>

    <!-- UpYun Advertise
    <div class="adv">
    	<a href="http://www.upyun.com/">
    		<img src="/imgs/upyun_logo.png" />
    	</a>
    </div> -->
  </body>
</html>